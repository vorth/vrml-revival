#VRML V2.0 utf8
WorldInfo {
  info [
    "author: Vladimir Bulatov bulatov@dots.physics.orst.edu"
    ]
}
NavigationInfo {
	type "NONE"
	headlight FALSE
}

EXTERNPROTO Polygon [
field MFVec3f vertices 
eventIn MFVec3f set_vertices 
eventOut SFBool isReady 
]"polygon_proto.wrl#Polygon"


EXTERNPROTO APP [
exposedField SFColor color 
]"utils_proto.wrl#APP"


EXTERNPROTO TetrahedronEdges [
# accept rectangle parallel to tetrahedron edge centered at (0 0 1)
exposedField MFNode children 
]"utils_proto.wrl#TetrahedronEdges"

EXTERNPROTO TetrahedronHalfEdges [
# accept rectangle parallel to tetrahedron edge centered at (0 0 1)
exposedField MFNode children 
]"utils_proto.wrl#TetrahedronHalfEdges"

EXTERNPROTO TetrahedronFaces [
# accepts hexagon centered at (1,1,1) or at (1,-1,1)
exposedField MFNode children 
]"utils_proto.wrl#TetrahedronFaces"

EXTERNPROTO Symmetry_T [
exposedField MFNode children
]"utils_proto.wrl#Symmetry_T"

PROTO Symmetry_Th2 [
exposedField MFNode children []
]{
    Group {
	children [
	DEF P Group {
	    children [
	    Group {
		children IS children 
	    }
	    Transform {
		rotation 0 0 1 3.1415926
		children IS children 
	    }
	    ]
	}
	Transform {
	    rotation 0 1 0 3.1415926
	    children USE P 
	}
	]
    }
}


PROTO Isogonal_Th [ 
# 
eventIn SFVec3f set_point
field SFVec3f point 0 0 1 
eventOut SFVec3f point_changed 
eventOut SFInt32 face_types
field SFString type "1"
  # possible types - vertex figure
  #    "1"  
eventIn SFInt32 set_visible   # this event turns On/Off visiblity of faces' group
                              # if (set_visible & 0x80000000), it turns ON face[set_visible | 0x7FFFFFFF]
                              # else it turns OFF face[set_visible]
eventOut MFNode faces_changed 
]{
  Group {
      children [
      Switch {
	  whichChoice -1
	  choice [
	  Group {
	      children [
	      DEF T1 Switch {
		  whichChoice 0
		  choice [
		  Shape {
		      geometry DEF P1 Polygon { 
		      }	  
		      appearance APP{
			  color 0.80 0.68 0.27
		      }
		  }
		  ]
	      }
	      DEF T2 Switch {
		  whichChoice 0
		  choice [
		  Shape {
		      geometry DEF P2 Polygon { 
		      }	  
		      appearance APP{
			  color 0.26 0.26 0.77
		      }
		  }
		  ]
	      }
	      DEF T3 Switch {
		  whichChoice 0
		  choice [
		  Group {
		      children [
		      Shape {
			  geometry DEF P3 Polygon { 
			  }	  
			  appearance APP{
			  color 0.87 0.44 0.30
			  }
		      }
		      Shape {
			  geometry DEF IFS3 IndexedFaceSet {
			      solid FALSE 
			      coord Coordinate{}
			  }	  
			  appearance APP{
			  color 0.87 0.44 0.30
			  }
		      }
		      ]
		  }
		  ]
	      }
	      DEF T4 Switch {
		  whichChoice 0
		  choice [
		  Shape {
		      geometry DEF P4 Polygon { 
		      }	  
		      appearance APP{
			  color 0.81 0.47 0.66
		      }
		  }
		  ]
	      }
	      DEF T5 Switch {
		  whichChoice 0
		  choice [
		  Shape {
		      geometry DEF P5 Polygon { 
		      }	  
		      appearance APP{
			  color 0.27 0.79 0.42
		      }
		  }
		  ]
	      }
	      ]
	  }
	  ]
      }

      DEF TE TetrahedronEdges {
      }
      DEF TH Symmetry_T{
      }
      DEF TH2 Symmetry_Th2{
      }
      ]
  }

  DEF ISOGONAL_TH Script {
      eventIn SFVec3f set_point IS set_point
      eventIn SFInt32 set_visible IS set_visible
      eventOut SFInt32 face_types IS face_types
      eventOut SFVec3f point_changed IS point_changed
      eventOut MFNode faces_changed IS faces_changed 
      field SFVec3f point IS  point
      field MFNode poly [USE P1 USE P2 USE P3 USE P4 USE P5]
      field MFNode ifs [USE IFS3]
      field MFNode trans [USE T1 USE T2 USE T3 USE T4 USE T5]

      field SFNode te USE TE
      field SFNode th USE TH
      field SFNode th2 USE TH2

      field SFString type IS type
      
      url [
      "javascript:
      function initialize(){
	  point = point.normalize();
	  init_f = new Array();
	  set_point_f = new Array();
	  init_f['1'] = init_1;
	  set_point_f['1'] = set_point_1;

	  init_f[type]();
	  set_point_f[type](point,0);
	  point_changed = point;
      }
      
      function set_point(p,t){
	  set_point_f[type](p,t);
	  point_changed = point;
      }

      function set_visible(v,t){
	  if(v & 0x80000000){
	      trans[v & 0x7FFFFFFF].whichChoice = 0;
	  } else {
	      trans[v].whichChoice = -1;
	  }
      }

      function init_1(){
	  
	  var part = new MFNode();
	  part[0] = trans[0];
	  te.set_children = part;	  

	  var part1 = new MFNode();
	  part1[0] = trans[1];
	  th.set_children = part1;	  

	  var part2 = new MFNode();
	  part2[0] = trans[2];
	  th2.set_children = part2;	  
	  
	  face_types = 3;
	  faces_changed = new MFNode(trans[0],trans[1],trans[2]);
      }
            
      function set_point_1(p,t){
	  var vert = new MFVec3f();
	  vert[0] = p;
	  vert[1] = new SFVec3f(-p.x,p.y,p.z);
	  vert[2] = new SFVec3f(-p.x,-p.y,p.z);
	  vert[3] = new SFVec3f(p.x,-p.y,p.z);
	  poly[0].set_vertices = vert;	  	  

	  var vert1 = new MFVec3f();
	  vert1[0] = p;
	  vert1[1] = new SFVec3f(p.x,-p.y,p.z);
	  vert1[2] = new SFVec3f(p.z,-p.x,p.y);
	  vert1[3] = new SFVec3f(p.z,p.x,p.y);
	  poly[1].set_vertices = vert1;	  	  

	  var vert2 = new MFVec3f();
	  vert2[0] = p;
	  vert2[1] = new SFVec3f(p.y,p.z,p.x);
	  vert2[2] = new SFVec3f(p.z,p.x,p.y);
	  vert2[3] = reflect_x(vert2[0]);
	  vert2[4] = reflect_x(vert2[1]);
	  vert2[5] = reflect_x(vert2[2]);
	  ifs[0].coord.set_point = vert2;
	  ci = new MFInt32(0,1,2,-1,3,4,5,-1);
	  ifs[0].set_coordIndex = ci;
      }          
      
      function reflect_x(p){
	  return new SFVec3f(-p.x, p.y, p.z);
      }

      "
      ]
  }  
}
