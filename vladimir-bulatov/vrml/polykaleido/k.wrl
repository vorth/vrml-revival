#VRML V2.0 utf8
WorldInfo{
    title "polyhedral kaleidoscop"
    info[
    "Author: Vladimir Bulatov - bulatov@dots.physics.orst.edu"
    ]
}

NavigationInfo {
    type "EXAMINE"
    headlight TRUE
}


PROTO Triangle1 [

]{    
    IndexedFaceSet {
	solid FALSE
	convex TRUE
	colorPerVertex FALSE
	normalPerVertex FALSE
	coord Coordinate { point [ 1 0 0, 0 0 0, 0.25 0 0.433 ] }
	coordIndex [0 1 2 0 -1]
	texCoord TextureCoordinate {point[ 1 0, 0 0, 0.25 0.433 ]}
    }    
}

PROTO Triangle2 [

]{    
    IndexedFaceSet {
	solid FALSE
	convex TRUE
	colorPerVertex FALSE
	normalPerVertex FALSE
	coord Coordinate{point[1 0 0, 0 0 0, -0.5 0 0.866]}
	coordIndex[0 1 2 0 -1]
	texCoord TextureCoordinate {point[ 1 0, 0 0, -0.5 0.866 ]}
    }    
}


PROTO Triangle3 [ # cube

]{    
    IndexedFaceSet {
	solid FALSE
	convex TRUE
	normalPerVertex FALSE
	colorPerVertex FALSE
	coord Coordinate{point[1 0 0, 0 0 0, 1 0 1]}
	coordIndex[0 1 2 0 -1]
	texCoord TextureCoordinate {point[ 1 0, 0 0, 1 1 ]}
    }    
}

PROTO Triangle4 [ # pentagram

]{    
    IndexedFaceSet {
	solid FALSE
	convex TRUE
	colorPerVertex FALSE
	normalPerVertex FALSE
	coord Coordinate{point[1 0 0, 0 0 0, 0.309016 0 0.224513]}
	coordIndex[0 1 2 0 -1]
	texCoord TextureCoordinate {point[ 1 0, 0 0, 0.309016 0.224513 ]}
    }    
}

PROTO Triangle5 [ # pentagon

]{    
    IndexedFaceSet {
	solid FALSE
	convex TRUE
	colorPerVertex FALSE
	normalPerVertex FALSE
	coord Coordinate{point[1 0 0, 0 0 0, 0.6545 0 0.4755]}
	coordIndex[0 1 2 0 -1]
	texCoord TextureCoordinate {point[ 1 0, 0 0, 0.6545 0.4755 ]}
    }    
}


PROTO KaleidoCanvas [
field SFNode geometry Box{}
field MFString url []
]
{
    Transform {
	rotation 1 0 0 -1.5708
	children [
	DEF SEGMENT Group {
	    children [
	    
	    DEF SENSOR PlaneSensor {
	    }
	    
	    Transform {
		rotation 1 0 0 -1.5708
		children Shape {
		    geometry IS geometry
		    appearance Appearance{
			material Material {
			    diffuseColor 0.2 0.7 0.5
			    shininess 0.3
			}
			texture ImageTexture{
			    url IS url
			}
			textureTransform DEF TTRANSFORM TextureTransform{
			    #scale 4 4
			}
		    }
		}
	    }
	    ]
	}
	
	]
    }
    
    DEF SCRIPT Script {

	directOutput TRUE

	eventIn SFBool set_active
	eventIn SFTime set_time
	eventIn SFVec3f set_translation
	
	field SFVec2f translation 0 0
	field SFVec2f offset 0 0
	field SFTime stop_time 0
	field SFTime delay 0
	field SFBool isStopped FALSE
	field SFBool isPressed FALSE
	field SFBool wasDragged FALSE
	field SFFloat fi 0
	field SFNode texture USE TTRANSFORM

	url "vrmlscript:

	function set_translation_int(time){	    
	    translation[0] = Math.sin(time/30)+offset[0];
	    translation[1] = Math.cos(time/40)+offset[1];
	    texture.set_translation = translation;
	    fi = 3.1415*Math.sin(time/155);
   	    texture.set_rotation = fi;
	    texture.set_center = offset;
	}

	function set_time(value, time){
	    if(!isStopped){
		set_translation_int(time-delay);
	    }
	}

	function set_translation(value, time){	    
	    wasDragged = TRUE;
	    
	    offset[0] = -(value[0]/3);
	    offset[1] = -(value[1]/3);
	    set_translation_int(stop_time-delay);
	    //translation_changed = translation;	
	}

	function set_active(value, time){	    

	    if( value ){
		wasDragged = FALSE;
		if(isStopped){
		    delay += (time - stop_time);		    
		}
		isStopped = TRUE;
		stop_time = time;
	    } else {
		if(!wasDragged){
		    // state will change to opposite
		    if(isPressed ){
			isPressed = FALSE;
			isStopped = FALSE;
			delay += (time - stop_time);
		    } else {
			isPressed = TRUE;
		    }
		} else {
		    // state should remain the same
		    if(isPressed){
			isStopped = TRUE;
			delay += (time - stop_time);
			stop_time = time;
		    } else {
			isStopped = FALSE;
			delay += (time - stop_time);
		    }
		}
	    }


	}
	"
    }
    
    DEF TIMER TimeSensor{
	enabled TRUE
	loop TRUE
    }
    
    ROUTE TIMER.time TO SCRIPT.set_time
    ROUTE SENSOR.translation_changed TO SCRIPT.set_translation
    ROUTE SENSOR.isActive TO SCRIPT.set_active
    
}

PROTO KaleidoSlider [

field MFNode children []

]
{
    Transform {
	rotation 1 0 0 -1.5708
	children [
	DEF SEGMENT Group {
	    children [
	    
	    DEF SENSOR PlaneSensor {
	    }
	    
	    DEF TRANSFORM Transform {
		rotation 1 0 0 -1.5708
		children IS children 
	    }
	    ]
	}
	
	]
    }
        
    ROUTE SENSOR.translation_changed TO TRANSFORM.set_translation
    
}


PROTO IcosahedronKaleidoscope [

field MFNode children []

]{
    Group{
	children[

	DEF segment10 Transform{
	    children [
	    DEF segment2 Transform {
		children [
		DEF segment1 Transform {
		    #translation 0.809016990 0 0
		    children[
		    Transform {
			rotation 0 0 1 -0.36485
			children[
			Transform {
			    #translation -0.28867513 0 0
			    children IS children
			}
			]	    
		    }
		    ]
		    
		}
		Transform {
		    rotation  0 1 0 3.1415926
		    children[
		    USE segment1
		    ]
		}
		]
	    }
	    Transform {
		rotation 1.618 1 0 1.256637061
		children[
		USE segment2
		]
	    }
	    Transform { 
		rotation 1.618 1 0 2.513274122
		children[	    
		USE segment2
		]
	    }
	    Transform {
		rotation 1.618 1 0 -1.256637061
		children[
		USE segment2
		]
	    }
	    Transform { 
		rotation 1.618 1 0 -2.513274122
		children[	    
		USE segment2
		]
	    }	    
	    ]
	}
	
	Transform {
	    rotation 0 0 1 3.1415926
	    children[
	    USE segment10
	    ]
	}
	]	
    }
}


PROTO TetrahedronKaleidoscope [

field MFNode children []

]{
    Group{
	children [
	DEF R0 Transform {
	    rotation 1 0 1 0.9553 #(atan(sqrt(2))
	    children Transform {
		rotation 0 1 0 0.7854
		children IS children 
	    }
	}
	Transform {
	    rotation  0 1 0 3.1415
	    children USE R0
	}
	
	Transform {
	    rotation  1 1 -1 2.094
	    children USE R0
	}
	
	Transform {
	    rotation  1 1 -1 -2.094
	    children USE R0
	}	
	]
    }
    
}

PROTO OctahedronKaleidoscope [

field MFNode children []

]{
    Transform{
	rotation 0 1 0 0.7853
	children [
	DEF R4 Group{
	    children [
	    DEF R0 Transform {
		rotation 0 0 1 0.9535
		children IS children
	    }
	    Transform {
		rotation 0 1 0 1.5708
		children USE R0
	    }
	    Transform {
		rotation 0 1 0 -1.5708
		children USE R0
	    }
	    Transform {
		rotation 0 1 0 3.1415
		children USE R0
	    }
	    ]
	}
	Transform {
	    rotation 0 0 1 3.1415
	    children USE R4
	}
	]
    }
}

PROTO DodecahedronKaleidoscope [

field MFNode children []

]{
    Group {
	children [
	DEF SEG4 Group {
	    children [
	    DEF SEG2 Group {	    
		children [
		DEF SEG1 Transform {
		    rotation 0 1 0 1.5708
		    children Transform {
			rotation 0 0 1 -0.5535
			children IS children 	
		    }
		}
		Transform {
		    rotation 0 1 0 3.1415
		    children USE SEG1
		}
		]	    
	    }
	    Transform {
		rotation 1 0 0 3.1415
		children USE SEG2
	    }	
	    ]	
	}
	Transform {
	    rotation 1 1 -1 2.0944
	    children USE SEG4
	}
	Transform {
	    rotation 1 1 -1 -2.0944
	    children USE SEG4
	}
	]
    }  

}

PROTO CubeKaleidoscope [

field MFNode children []

]{
    Group {
	children [
	DEF SEG4 Group {
	    children [
	    DEF SEG2 Group {	    
		children IS children
	    }
	    Transform {
		rotation 1 0 0 3.1415
		children USE SEG2
	    }	
	    ]	
	}
	Transform {
	    rotation 1 1 -1 2.0944
	    children USE SEG4
	}
	Transform {
	    rotation 1 1 -1 -2.0944
	    children USE SEG4
	}
	]
    }  

}



PROTO Triangle6 [
field MFString url []
]{
    Group {
	
	children [
	DEF SEGMENT Group {
	    children [
	    DEF S1 KaleidoCanvas{
		geometry Triangle1{}
		url IS url
	    }
	    Transform {
		rotation 0.25 0 0.433 3.1415
		children USE S1
	    }
	    ]
	}
	
	Transform {
	    rotation 0 1 0 2.0943
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 -2.0943
	    children USE SEGMENT
	}
	]
    }
    
}

PROTO Triangle8 [
field MFString url []
]{
    Group {
	
	children [

	DEF SEGMENT Group {

	    children [
	    DEF S1 KaleidoCanvas{
		geometry Triangle3{}	 
		url IS url
	    }

	    Transform {
		rotation 1 0 1 3.1415
		children USE S1
	    }

	    ]
	}
	
	Transform {
	    rotation 0 1 0 1.5708
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 -1.5708
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 3.1415
	    children USE SEGMENT
	}
	]
    }    
}

PROTO Triangle10 [
field MFString url []
]{
    Group {
	
	children [
	DEF SEGMENT Group {
	    children [
	    DEF S1 KaleidoCanvas{
		geometry Triangle5{}	 
		url IS url
	    }
	    Transform {
		rotation 0.6545 0 0.4755 3.1415
		children USE S1
	    }
	    ]
	}
	
	Transform {
	    rotation 0 1 0 1.2566
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 -1.2566
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 2.5132
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 -2.5132
	    children USE SEGMENT
	}
	]
    }
    
}

PROTO Triangle11 [
field MFString url []
]{
    Group {
	
	children [
	DEF SEGMENT Group {
	    children [
	    DEF S1 KaleidoCanvas{
		geometry Triangle4{}	 
		url IS url
	    }
	    Transform {
		rotation 0.6545 0 0.4755 3.1415
		children USE S1
	    }
	    ]
	}
	
	Transform {
	    rotation 0 1 0 1.2566
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 -1.2566
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 2.5132
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 -2.5132
	    children USE SEGMENT
	}
	]
    }
    
}


PROTO GreatIcosahedron [
field MFString url []
]{

    IcosahedronKaleidoscope { 
	children Transform {
	    translation 0 0.19 0 rotation 0 1 0 3.1415 # great icosahedron
	    children Triangle6{
		url IS url
	    }
	}    
    }
}

PROTO Icosahedron [
field MFString url []
]{
    IcosahedronKaleidoscope {
	children Transform {
	    translation 0 1.3 0 # icosahedron
	    children Triangle6{
		url IS url
	    }
	}    
    }
}

PROTO Tetrahedron [
field MFString url []
]{
    TetrahedronKaleidoscope {
	children Transform {
	    translation 0 -0.352 0
	    children Triangle6{
		url IS url
	    }
	}    
    }    
}

PROTO Octahedron [
field MFString url []
]{
    OctahedronKaleidoscope {
	children Transform {
	    translation 0 0.703 0 
	    children Triangle6{
		url IS url
	    }
	}    
    }     
}


PROTO Cube [
field MFString url []
]{
 CubeKaleidoscope {
     children Transform {
	translation 0 1 0 
	children Triangle8{
	   url IS url
        }
     }    
 }
}

PROTO Dodecahedron [
field MFString url []
]{
    DodecahedronKaleidoscope { # dodecahedron
	children Transform {
	    translation 0 1.3 0 
	    children Triangle10{
		url IS url
	    }
	}    
    }
}


PROTO GreatDodecahedron [
field MFString url []
]{
    DodecahedronKaleidoscope { # great dodecahedron
	children Transform {
	    translation 0 -0.5 0 
	    children Triangle10{
		url IS url
	    }
	}    
    }
}

PROTO GreatStellatedDodecahedron [
field MFString url []
]{    
    DodecahedronKaleidoscope { # great stellated dodecahedron
	children Transform {
	    translation 0 0.19 0 
	    children Triangle11{
		url IS url
	    }
	}    
    }
}


PROTO SmallStellatedDodecahedron [
field MFString url []
]{
    DodecahedronKaleidoscope { # small stellated dodecahedron
	children Transform {
	    translation 0 -0.5 0 
	    children Triangle11{
		url IS url
	    }
	}    
    }
}
