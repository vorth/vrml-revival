#VRML V2.0 utf8
WorldInfo{
    title "polyhedral kaleidoscope"
    info[
    "Author: Vladimir Bulatov - bulatov@dots.physics.orst.edu"
    ]
}

NavigationInfo {
#    type "EXAMINE"
    type "NONE"
    headlight FALSE
}

DirectionalLight {
    ambientIntensity 0.7
    direction 0.1 -0.2 -1
}

Viewpoint {
    position 0 0 20
}

Background {
    groundAngle [ 1.57 ]
    groundColor [
    0.5 0.0 0.99
    0.99 0.99 0.00
    ]
    skyAngle [  1.57 ]
    skyColor [
    0.99 0.2 0.00
    0.99 0.99 0.00
    ]
}

PROTO U06 []{
Shape{
    geometry IndexedFaceSet{
      solid FALSE
      convex FALSE
      colorPerVertex FALSE
      coord Coordinate{
         point[
           0.577350 -0.577350 0.577350,
           0.577350 0.577350 -0.577350,
           -0.577350 0.577350 0.577350,
           -0.577350 -0.577350 -0.577350,
         ]
      }
      coordIndex[
        2,1,0,-1,
        3,2,0,-1,
        0,1,3,-1,
        1,2,3,-1,
      ]
    }
    appearance Appearance {
      material Material { 
        diffuseColor 0.31 0.28 0.80 
      }
    }
}
}
PROTO  U10[]{  Shape{
    geometry IndexedFaceSet{
      solid FALSE
      convex FALSE
      colorPerVertex FALSE
      color Color{
        color [
        0 0 0,0 0 0,0 0 0,
        0.80 0.31 0.28, 
        0.80 0.68 0.27, 
        0.27 0.79 0.42, 
        0.87 0.54 0.30, 
        0 0 0,    
        0.24 0.59 0.71, 
        0 0 0,  
        0.58 0.26 0.77, 
        0.52 0.71 0.24, 
        0.81 0.47 0.66, 
        0 0 0,
        0 0 0,
        0.80 0.80 0.28, 
        0 0 0,
        0.26 0.26 0.77, 
        ]
      }
    coord Coordinate{
         point[
           -0.000000 0.000000 1.000000,
           1.000000 0.000000 0.000000,
           -0.000000 1.000000 0.000000,
           -1.000000 -0.000000 -0.000000,
           -0.000000 -1.000000 0.000000,
           0.000000 0.000000 -1.000000,
         ]
    }
    coordIndex[
      2,1,0,-1,
      3,2,0,-1,
      4,3,0,-1,
      0,1,4,-1,
      5,4,1,-1,
      1,2,5,-1,
      2,3,5,-1,
      3,4,5,-1,
    ]
    colorIndex[
      3, 3, 3, 3, 3, 3, 3, 3, 
    ]
    }
    appearance Appearance {
      material Material { 
      }
    }
}

}
PROTO U11[]{  Shape{
    geometry IndexedFaceSet{
      solid FALSE
      convex FALSE
      colorPerVertex FALSE
      color Color{
        color [
        0 0 0,0 0 0,0 0 0,
        0.80 0.31 0.28, 
        0.80 0.68 0.27, 
        0.27 0.79 0.42, 
        0.87 0.54 0.30, 
        0 0 0,    
        0.24 0.59 0.71, 
        0 0 0,  
        0.58 0.26 0.77, 
        0.52 0.71 0.24, 
        0.81 0.47 0.66, 
        0 0 0,
        0 0 0,
        0.80 0.80 0.28, 
        0 0 0,
        0.26 0.26 0.77, 
        ]
      }
    coord Coordinate{
         point[
           0.577350 0.577350 0.577350,
           0.577350 -0.577350 0.577350,
           0.577350 0.577350 -0.577350,
           -0.577350 0.577350 0.577350,
           0.577350 -0.577350 -0.577350,
           -0.577350 -0.577350 0.577350,
           -0.577350 0.577350 -0.577350,
           -0.577350 -0.577350 -0.577350,
         ]
    }
    coordIndex[
      2,4,1,0,-1,
      3,6,2,0,-1,
      0,1,5,3,-1,
      1,4,7,5,-1,
      6,7,4,2,-1,
      3,5,7,6,-1,
    ]
    colorIndex[
      4, 4, 4, 4, 4, 4, 
    ]
    }
    appearance Appearance {
      material Material { 
      }
    }
}

}
PROTO  U27[]{  Shape{
    geometry IndexedFaceSet{
      solid FALSE
      convex FALSE
      colorPerVertex FALSE
      color Color{
        color [
        0 0 0,0 0 0,0 0 0,
        0.80 0.31 0.28, 
        0.80 0.68 0.27, 
        0.27 0.79 0.42, 
        0.87 0.54 0.30, 
        0 0 0,    
        0.24 0.59 0.71, 
        0 0 0,  
        0.58 0.26 0.77, 
        0.52 0.71 0.24, 
        0.81 0.47 0.66, 
        0 0 0,
        0 0 0,
        0.80 0.80 0.28, 
        0 0 0,
        0.26 0.26 0.77, 
        ]
      }
    coord Coordinate{
         point[
           0.000000 0.850651 0.525731,
           0.850651 0.525731 -0.000000,
           0.000000 0.850651 -0.525731,
           -0.850651 0.525731 0.000000,
           -0.525731 0.000000 0.850651,
           0.525731 -0.000000 0.850651,
           0.525731 0.000000 -0.850651,
           0.850651 -0.525731 -0.000000,
           -0.525731 0.000000 -0.850651,
           -0.850651 -0.525731 0.000000,
           -0.000000 -0.850651 0.525731,
           0.000000 -0.850651 -0.525731,
         ]
    }
    coordIndex[
      2,1,0,-1,
      3,2,0,-1,
      4,3,0,-1,
      5,4,0,-1,
      0,1,5,-1,
      7,5,1,-1,
      1,6,7,-1,
      1,2,6,-1,
      8,6,2,-1,
      2,3,8,-1,
      9,8,3,-1,
      3,4,9,-1,
      10,9,4,-1,
      4,5,10,-1,
      5,7,10,-1,
      11,7,6,-1,
      6,8,11,-1,
      11,10,7,-1,
      8,9,11,-1,
      9,10,11,-1,
    ]
    colorIndex[
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    ]
    }
    appearance Appearance {
      material Material { 
      }
    }
}
}
PROTO  U28[]{  Shape{
    geometry IndexedFaceSet{
      solid FALSE
      convex FALSE
      colorPerVertex FALSE
      color Color{
        color [
        0 0 0,0 0 0,0 0 0,
        0.80 0.31 0.28, 
        0.80 0.68 0.27, 
        0.27 0.79 0.42, 
        0.87 0.54 0.30, 
        0 0 0,    
        0.24 0.59 0.71, 
        0 0 0,  
        0.58 0.26 0.77, 
        0.52 0.71 0.24, 
        0.81 0.47 0.66, 
        0 0 0,
        0 0 0,
        0.80 0.80 0.28, 
        0 0 0,
        0.26 0.26 0.77, 
        ]
      }
    coord Coordinate{
         point[
           -0.356822 0.934172 -0.000000,
           -0.577350 0.577350 0.577350,
           0.356822 0.934172 -0.000000,
           -0.577350 0.577350 -0.577350,
           -0.000000 0.356822 0.934172,
           -0.934172 0.000000 0.356822,
           0.577350 0.577350 -0.577350,
           0.577350 0.577350 0.577350,
           -0.934172 0.000000 -0.356822,
           -0.000000 0.356822 -0.934172,
           -0.000000 -0.356822 0.934172,
           -0.577350 -0.577350 0.577350,
           0.934172 0.000000 -0.356822,
           0.934172 -0.000000 0.356822,
           -0.577350 -0.577350 -0.577350,
           0.000000 -0.356822 -0.934172,
           0.577350 -0.577350 0.577350,
           -0.356822 -0.934172 0.000000,
           0.577350 -0.577350 -0.577350,
           0.356822 -0.934172 0.000000,
         ]
    }
    coordIndex[
      2,7,4,1,0,-1,
      3,9,6,2,0,-1,
      0,1,5,8,3,-1,
      1,4,10,11,5,-1,
      2,6,12,13,7,-1,
      3,8,14,15,9,-1,
      4,7,13,16,10,-1,
      11,17,14,8,5,-1,
      6,9,15,18,12,-1,
      16,19,17,11,10,-1,
      18,19,16,13,12,-1,
      17,19,18,15,14,-1,
    ]
    colorIndex[
      5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    ]
    }
    appearance Appearance {
      material Material { 
      }
    }
}
}

PROTO  U39[]{
  Shape{
    geometry IndexedFaceSet{
      solid FALSE
      convex FALSE
      colorPerVertex FALSE
      color Color{
        color [
        0 0 0,0 0 0,0 0 0,
        0.80 0.31 0.28, 
        0.80 0.68 0.27, 
        0.27 0.79 0.42, 
        0.87 0.54 0.30, 
        0 0 0,    
        0.24 0.59 0.71, 
        0 0 0,  
        0.58 0.26 0.77, 
        0.52 0.71 0.24, 
        0.81 0.47 0.66, 
        0 0 0,
        0 0 0,
        0.80 0.80 0.28, 
        0 0 0,
        0.26 0.26 0.77, 
        ]
      }
    coord Coordinate{
         point[
           -0.850651 0.525731 -0.000000,
           0.525731 0.000000 0.850651,
           0.850651 0.525731 -0.000000,
           0.525731 0.000000 -0.850651,
           -0.000000 -0.850651 -0.525731,
           -0.000000 -0.850651 0.525731,
           0.000000 0.850651 -0.525731,
           -0.850651 -0.525731 -0.000000,
           -0.525731 -0.000000 -0.850651,
           -0.525731 -0.000000 0.850651,
           -0.000000 0.850651 0.525731,
           0.850651 -0.525731 0.000000,
           0.000000 0.380423 0.235114,
           0.000000 0.380423 -0.235114,
           -0.235114 0.000000 -0.380423,
           -0.380423 -0.235114 -0.000000,
           -0.235114 0.000000 0.380423,
           0.000000 -0.380423 0.235114,
           0.380423 -0.235114 0.000000,
           0.380423 0.235114 0.000000,
           0.235114 -0.000000 0.380423,
           0.235114 0.000000 -0.380423,
           0.000000 -0.380423 -0.235114,
           -0.380423 0.235114 -0.000000,
         ]
    }
    coordIndex[
      12,2,9,-1,
      12,9,6,-1,
      12,6,1,-1,
      12,1,0,-1,
      12,0,2,-1,
      13,3,10,-1,
      13,10,8,-1,
      13,8,2,-1,
      13,2,0,-1,
      13,0,3,-1,
      14,4,6,-1,
      14,6,7,-1,
      14,7,3,-1,
      14,3,0,-1,
      14,0,4,-1,
      15,5,8,-1,
      15,8,9,-1,
      15,9,4,-1,
      15,4,0,-1,
      15,0,5,-1,
      16,0,1,-1,
      16,1,7,-1,
      16,7,10,-1,
      16,10,5,-1,
      16,5,0,-1,
      17,1,4,-1,
      17,4,9,-1,
      17,9,11,-1,
      17,11,7,-1,
      17,7,1,-1,
      18,1,3,-1,
      18,3,5,-1,
      18,5,2,-1,
      18,2,4,-1,
      18,4,1,-1,
      19,6,11,-1,
      19,11,10,-1,
      19,10,3,-1,
      19,3,1,-1,
      19,1,6,-1,
      20,2,5,-1,
      20,5,10,-1,
      20,10,11,-1,
      20,11,9,-1,
      20,9,2,-1,
      21,8,11,-1,
      21,11,6,-1,
      21,6,4,-1,
      21,4,2,-1,
      21,2,8,-1,
      22,7,11,-1,
      22,11,8,-1,
      22,8,5,-1,
      22,5,3,-1,
      22,3,7,-1,
      23,9,8,-1,
      23,8,10,-1,
      23,10,7,-1,
      23,7,6,-1,
      23,6,9,-1,
    ]
    colorIndex[
      12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
    ]
    }
    appearance Appearance {
      material Material { 
      }
    }
}

}

PROTO U40 []{
  Shape{
    geometry IndexedFaceSet{
      solid FALSE
      convex FALSE
      colorPerVertex FALSE
      color Color{
        color [
        0 0 0,0 0 0,0 0 0,
        0.80 0.31 0.28, 
        0.80 0.68 0.27, 
        0.27 0.79 0.42, 
        0.87 0.54 0.30, 
        0 0 0,    
        0.24 0.59 0.71, 
        0 0 0,  
        0.58 0.26 0.77, 
        0.52 0.71 0.24, 
        0.81 0.47 0.66, 
        0 0 0,
        0 0 0,
        0.80 0.80 0.28, 
        0 0 0,
        0.26 0.26 0.77, 
        ]
      }
    coord Coordinate{
         point[
           0.850651 0.525731 -0.000000,
           -0.000000 0.850651 -0.525731,
           0.525731 0.000000 0.850651,
           0.525731 -0.000000 -0.850651,
           0.000000 0.850651 0.525731,
           0.850651 -0.525731 0.000000,
           -0.850651 0.525731 -0.000000,
           -0.525731 0.000000 -0.850651,
           0.000000 -0.850651 0.525731,
           -0.525731 -0.000000 0.850651,
           -0.000000 -0.850651 -0.525731,
           -0.850651 -0.525731 -0.000000,
         ]
    }
    coordIndex[
      2,9,6,1,0,-1,
      3,10,8,2,0,-1,
      4,6,7,3,0,-1,
      5,8,9,4,0,-1,
      0,1,7,10,5,-1,
      1,4,9,11,7,-1,
      1,3,5,2,4,-1,
      6,11,10,3,1,-1,
      2,5,10,11,9,-1,
      8,11,6,4,2,-1,
      7,11,8,5,3,-1,
      9,8,10,7,6,-1,
    ]
    colorIndex[
      5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
    ]
    }
    appearance Appearance {
      material Material { 
      }
    }
}

}

PROTO U57 []{
  Shape{
    geometry IndexedFaceSet{
      solid FALSE
      convex FALSE
      colorPerVertex FALSE
      color Color{
        color [
        0 0 0,0 0 0,0 0 0,
        0.80 0.31 0.28, 
        0.80 0.68 0.27, 
        0.27 0.79 0.42, 
        0.87 0.54 0.30, 
        0 0 0,    
        0.24 0.59 0.71, 
        0 0 0,  
        0.58 0.26 0.77, 
        0.52 0.71 0.24, 
        0.81 0.47 0.66, 
        0 0 0,
        0 0 0,
        0.80 0.80 0.28, 
        0 0 0,
        0.26 0.26 0.77, 
        ]
      }
    coord Coordinate{
         point[
           0.000000 -0.356822 0.934172,
           0.577350 0.577350 -0.577350,
           -0.577350 0.577350 -0.577350,
           -0.000000 -0.356822 -0.934172,
           -0.934172 0.000000 0.356822,
           -0.356822 -0.934172 -0.000000,
           0.356822 -0.934172 -0.000000,
           0.934172 0.000000 0.356822,
           0.577350 0.577350 0.577350,
           -0.577350 0.577350 0.577350,
           0.577350 -0.577350 -0.577350,
           -0.356822 0.934172 0.000000,
           0.356822 0.934172 -0.000000,
           -0.577350 -0.577350 -0.577350,
           -0.934172 0.000000 -0.356822,
           0.934172 -0.000000 -0.356822,
           0.000000 0.356822 0.934172,
           0.577350 -0.577350 0.577350,
           -0.577350 -0.577350 0.577350,
           0.000000 0.356822 -0.934172,
           0.000000 0.159576 0.098623,
           -0.159576 -0.098623 0.000000,
           0.159576 -0.098623 -0.000000,
           -0.098623 0.000000 -0.159576,
           0.098623 0.000000 -0.159576,
           0.000000 0.159576 -0.098623,
           -0.000000 -0.159576 0.098623,
           -0.098623 -0.000000 0.159576,
           0.098623 -0.000000 0.159576,
           0.159576 0.098623 -0.000000,
           -0.159576 0.098623 0.000000,
           0.000000 -0.159576 -0.098623,
         ]
    }
    coordIndex[
      20,2,7,-1,
      20,7,4,-1,
      20,4,1,-1,
      20,1,0,-1,
      20,0,2,-1,
      21,3,9,-1,
      21,9,6,-1,
      21,6,2,-1,
      21,2,0,-1,
      21,0,3,-1,
      22,0,1,-1,
      22,1,5,-1,
      22,5,8,-1,
      22,8,3,-1,
      22,3,0,-1,
      23,1,4,-1,
      23,4,10,-1,
      23,10,11,-1,
      23,11,5,-1,
      23,5,1,-1,
      24,2,6,-1,
      24,6,12,-1,
      24,12,13,-1,
      24,13,7,-1,
      24,7,2,-1,
      25,3,8,-1,
      25,8,14,-1,
      25,14,15,-1,
      25,15,9,-1,
      25,9,3,-1,
      26,4,7,-1,
      26,7,13,-1,
      26,13,16,-1,
      26,16,10,-1,
      26,10,4,-1,
      27,11,17,-1,
      27,17,14,-1,
      27,14,8,-1,
      27,8,5,-1,
      27,5,11,-1,
      28,6,9,-1,
      28,9,15,-1,
      28,15,18,-1,
      28,18,12,-1,
      28,12,6,-1,
      29,16,19,-1,
      29,19,17,-1,
      29,17,11,-1,
      29,11,10,-1,
      29,10,16,-1,
      30,18,19,-1,
      30,19,16,-1,
      30,16,13,-1,
      30,13,12,-1,
      30,12,18,-1,
      31,17,19,-1,
      31,19,18,-1,
      31,18,15,-1,
      31,15,14,-1,
      31,14,17,-1,
    ]
    colorIndex[
      12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
    ]
    }
    appearance Appearance {
      material Material { 
      }
    }
}

}

PROTO U58 []{
  Shape{
    geometry IndexedFaceSet{
      solid FALSE
      convex FALSE
      colorPerVertex FALSE
      color Color{
        color [
        0 0 0,0 0 0,0 0 0,
        0.80 0.31 0.28, 
        0.80 0.68 0.27, 
        0.27 0.79 0.42, 
        0.87 0.54 0.30, 
        0 0 0,    
        0.24 0.59 0.71, 
        0 0 0,  
        0.58 0.26 0.77, 
        0.52 0.71 0.24, 
        0.81 0.47 0.66, 
        0 0 0,
        0 0 0,
        0.80 0.80 0.28, 
        0 0 0,
        0.26 0.26 0.77, 
        ]
      }
    coord Coordinate{
         point[
           -0.850651 0.525731 -0.000000,
           0.525731 -0.000000 0.850651,
           0.525731 0.000000 -0.850651,
           -0.000000 -0.850651 0.525731,
           0.850651 0.525731 0.000000,
           -0.000000 -0.850651 -0.525731,
           -0.850651 -0.525731 -0.000000,
           -0.000000 0.850651 -0.525731,
           -0.000000 0.850651 0.525731,
           -0.525731 0.000000 -0.850651,
           -0.525731 -0.000000 0.850651,
           0.850651 -0.525731 0.000000,
         ]
    }
    coordIndex[
      2,1,0,-1,
      3,2,0,-1,
      4,3,0,-1,
      5,4,0,-1,
      0,1,5,-1,
      7,5,1,-1,
      1,6,7,-1,
      1,2,6,-1,
      8,6,2,-1,
      2,3,8,-1,
      9,8,3,-1,
      3,4,9,-1,
      10,9,4,-1,
      4,5,10,-1,
      5,7,10,-1,
      11,7,6,-1,
      6,8,11,-1,
      11,10,7,-1,
      8,9,11,-1,
      9,10,11,-1,
    ]
    colorIndex[
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    ]
    }
    appearance Appearance {
      material Material { 
      }
    }
}

}

PROTO BFrame [
]{
    Transform {
	translation -0.0 0 0.0
	children 
	Shape { 
	    geometry Box { 
		size 0.85 0.85 0.2
	    }
	    appearance Appearance {
		material Material {
		    diffuseColor 0.9 0.4 0.4
		}	
	    }
	}
    }
    
}


PROTO u06_u []{Transform {scale 0.5 0.5 0.5 children U06{}}}
PROTO u06_d []{Group {children [u06_u {}BFrame{}]}}

PROTO u10_u []{Transform {scale 0.5 0.5 0.5 children U10{}}}
PROTO u10_d []{Group {children [u10_u {}BFrame{}]}}

PROTO u11_u []{Transform {scale 0.5 0.5 0.5 children U11{}}}
PROTO u11_d []{Group {children [u11_u {}BFrame{}]}}

PROTO u27_u []{Transform {scale 0.5 0.5 0.5 children U27{}}}
PROTO u27_d []{Group {children [u27_u {}BFrame{}]}}

PROTO u28_u []{Transform {scale 0.5 0.5 0.5 children U28{}}}
PROTO u28_d []{Group {children [u28_u {}BFrame{}]}}

PROTO u39_u []{Transform {scale 0.5 0.5 0.5 children U39{}}}
PROTO u39_d []{Group {children [u39_u {}BFrame{}]}}

PROTO u40_u []{Transform {scale 0.5 0.5 0.5 children U40{}}}
PROTO u40_d []{Group {children [u40_u {}BFrame{}]}}

PROTO u57_u []{Transform {scale 0.5 0.5 0.5 children U57{}}}
PROTO u57_d []{Group {children [u57_u {}BFrame{}]}}

PROTO u58_u []{Transform {scale 0.5 0.5 0.5 children U58{}}}
PROTO u58_d []{Group {children [u58_u {}BFrame{}]}}

PROTO PButton [
eventOut SFBool isPressed
eventOut SFTime timePressed 
eventOut SFInt32 state_changed
eventIn  SFBool set_pressed
field SFInt32 data 0
field MFNode shapes[ 
Group {
    children [
    Shape { 
	geometry Box { size 0.7 0.7 0.2 }
	appearance Appearance { material Material { diffuseColor 0.4 0.4 0.9 }}	
    }
    Shape { 
	geometry Box { size 0.85 0.85 0.18 }
	appearance Appearance { material Material { diffuseColor 0.9 0.4 0.4 }}
	
    }
    ]
}
Shape { 
    geometry Box { size 0.8 0.8 0.2 }
    appearance Appearance { material Material { diffuseColor 0.4 0.4 0.9 }}
}
]
field SFString description "click here"
]{

    Group{
	children[
	DEF BUTTON TouchSensor{}
	DEF SHAPE Group {
	}
	]
    }
    
    DEF SCRIPT Script {
	directOutput TRUE
	eventIn SFBool setOver
	eventIn SFBool setActive
	eventIn SFBool set_pressed IS set_pressed
	
	eventOut SFBool isPressed IS isPressed
	eventOut SFTime timePressed IS timePressed
	eventOut SFInt32 state_changed IS state_changed
	
	field SFInt32 data IS data

	field SFNode shape USE SHAPE
	field MFNode shapes IS shapes

	field SFString description IS description
	field SFBool is_over FALSE
	field SFBool is_active FALSE
	field SFBool is_pressed FALSE

	url [
	"javascript:
	function initialize(){
	    shape.children[0] = shapes[1];	    
	}
	function set_pressed(value,time){
	    is_pressed = value;
	    if(is_pressed){
		shape.children[0] = shapes[0];
	    } else {
		shape.children[0] = shapes[1];
	    }
	}

	function setActive(value,time){
	    //print('button.setActive('+value+','+time+')');
	    timePressed = time;
	    if(value){
		if(is_pressed){
		    is_pressed = FALSE;
		    isPressed = FALSE;
		    state_changed = (data | 0x1000);
		    //shape.children[0] = shapes[1];
		} else {
		    is_pressed = TRUE;
		    isPressed = TRUE;
		    state_changed = data;
		    //shape.children[0] = shapes[0];
		}
	    }
	}
	
	function setOver(value,time){
	    is_over = value;
	    if(value){
		Browser.setDescription(description);
	    } else {
		Browser.setDescription('');
	    }
	}
	
	"]
    }

    ROUTE BUTTON.isActive TO SCRIPT.setActive
    ROUTE BUTTON.isOver TO SCRIPT.setOver    
}

PROTO Triangle1 [

]{    
    IndexedFaceSet {
      solid FALSE
      convex TRUE
      colorPerVertex FALSE
      normalPerVertex FALSE
      coord Coordinate { point [ 1 0 0, 0 0 0, 0.25 0 0.433 ] }
      coordIndex [0 1 2 0 -1]
      texCoord TextureCoordinate {point[ 1 0, 0 0, 0.25 0.433 ]}
    }    
}

PROTO Triangle2 [

]{    
    IndexedFaceSet {
      solid FALSE
      convex TRUE
      colorPerVertex FALSE
      normalPerVertex FALSE
      coord Coordinate{point[1 0 0, 0 0 0, -0.5 0 0.866]}
      coordIndex[0 1 2 0 -1]
      texCoord TextureCoordinate {point[ 1 0, 0 0, -0.5 0.866 ]}
    }    
}


PROTO Triangle3 [ # cube

]{    
    IndexedFaceSet {
	solid FALSE
	convex TRUE
	normalPerVertex FALSE
	colorPerVertex FALSE
	coord Coordinate{point[1 0 0, 0 0 0, 1 0 1]}
	coordIndex[0 1 2 0 -1]
	texCoord TextureCoordinate {point[ 1 0, 0 0, 1 1 ]}
    }    
}

PROTO Triangle4 [ # pentagram

]{    
    IndexedFaceSet {
	solid FALSE
	convex TRUE
	colorPerVertex FALSE
	normalPerVertex FALSE
	coord Coordinate{point[1 0 0, 0 0 0, 0.309016 0 0.224513]}
	coordIndex[0 1 2 0 -1]
	texCoord TextureCoordinate {point[ 1 0, 0 0, 0.309016 0.224513 ]}
    }    
}

PROTO Triangle5 [ # pentagon

]{    
    IndexedFaceSet {
	solid FALSE
	convex TRUE
	colorPerVertex FALSE
	normalPerVertex FALSE
	coord Coordinate{point[1 0 0, 0 0 0, 0.6545 0 0.4755]}
	coordIndex[0 1 2 0 -1]
	texCoord TextureCoordinate {point[ 1 0, 0 0, 0.6545 0.4755 ]}
    }    
}


PROTO KaleidoCanvas [
  field SFNode geometry Box{}
  exposedField MFString url []
]
{
    Transform {
	rotation 1 0 0 -1.5708
	children [
	DEF SEGMENT Group {
	    children [
	    
	    DEF SENSOR PlaneSensor {
        enabled FALSE
	    }
	    
	    Transform {
        rotation 1 0 0 -1.5708
        children Shape {
            geometry IS geometry
            appearance Appearance{
            material Material {
                diffuseColor 0.9 0.9 0.9
                shininess 1.0
            }
            texture ImageTexture{
                url IS url
            }
            textureTransform DEF TTRANSFORM TextureTransform{
                #scale 4 4
            }
		    }
		}
	    }
	    ]
	}
	
	]
    }
    
    DEF SCRIPT Script {

	directOutput TRUE

	eventIn SFBool set_active
	eventIn SFTime set_time
	eventIn SFVec3f set_translation
	
	field SFVec2f translation 0 0
	field SFVec2f offset 0 0
	field SFTime stop_time 0
	field SFTime delay 0
	field SFBool isStopped FALSE
	field SFBool isPressed FALSE
	field SFBool wasDragged FALSE
	field SFFloat fi 0
	field SFNode texture USE TTRANSFORM

	url [
	"javascript:

	function set_translation_int(time){	    

	    translation[0] = Math.sin(time/30)+offset[0];
	    translation[1] = Math.cos(time/40)+offset[1];
	    texture.set_translation = translation;
	    fi = 3.1415926*Math.sin(time/155);
   	    texture.set_rotation = fi;
	    texture.set_center = offset;

	}

	function set_time(value, time){
	    if(!isStopped){
		set_translation_int(time-delay);
	    }
	}

	function set_translation(value, time){	    
	    wasDragged = TRUE;
	    
	    offset[0] = -(value[0]/3);
	    offset[1] = -(value[1]/3);
	    set_translation_int(stop_time-delay);
	    //translation_changed = translation;	
	}

	function set_active(value, time){	    

	    if( value ){
		wasDragged = FALSE;
		if(isStopped){
		    delay += (time - stop_time);		    
		}
		isStopped = TRUE;
		stop_time = time;
	    } else {
		if(!wasDragged){
		    // state will change to opposite
		    if(isPressed ){
			isPressed = FALSE;
			isStopped = FALSE;
			delay += (time - stop_time);
		    } else {
			isPressed = TRUE;
		    }
		} else {
		    // state should remain the same
		    if(isPressed){
			isStopped = TRUE;
			delay += (time - stop_time);
			stop_time = time;
		    } else {
			isStopped = FALSE;
			delay += (time - stop_time);
		    }
		}
	    }
	}
	"
	]
    }
    
    DEF TIMER TimeSensor{
	enabled TRUE
	#enabled FALSE
	loop TRUE
    }
    
    ROUTE TIMER.time TO SCRIPT.set_time
    ROUTE SENSOR.translation_changed TO SCRIPT.set_translation
    ROUTE SENSOR.isActive TO SCRIPT.set_active
    
}

PROTO KaleidoSlider [

field MFNode children []

]
{
    Transform {
	rotation 1 0 0 -1.5708
	children [
	DEF SEGMENT Group {
	    children [
	    
	    DEF SENSOR PlaneSensor {
	    }
	    
	    DEF TRANSFORM Transform {
		rotation 1 0 0 -1.5708
		children IS children 
	    }
	    ]
	}
	
	]
    }
        
    ROUTE SENSOR.translation_changed TO TRANSFORM.set_translation
    
}


PROTO IcosahedronKaleidoscope [

field MFNode children []

]{
    Group{
	children[

	DEF segment10 Transform{
	    children [
	    DEF segment2 Transform {
		children [
		DEF segment1 Transform {
		    #translation 0.809016990 0 0
		    children[
		    Transform {
			rotation 0 0 1 -0.36485
			children[
			Transform {
			    #translation -0.28867513 0 0
			    children IS children
			}
			]	    
		    }
		    ]
		    
		}
		Transform {
		    rotation  0 1 0 3.1415926
		    children[
		    USE segment1
		    ]
		}
		]
	    }
	    Transform {
		rotation 1.618 1 0 1.256637061
		children[
		USE segment2
		]
	    }
	    Transform { 
		rotation 1.618 1 0 2.513274122
		children[	    
		USE segment2
		]
	    }
	    Transform {
		rotation 1.618 1 0 -1.256637061
		children[
		USE segment2
		]
	    }
	    Transform { 
		rotation 1.618 1 0 -2.513274122
		children[	    
		USE segment2
		]
	    }	    
	    ]
	}
	
	Transform {
	    rotation 0 0 1 3.1415926
	    children[
	    USE segment10
	    ]
	}
	]	
    }
}


PROTO TetrahedronKaleidoscope [

field MFNode children []

]{
    Group{
	children [
	DEF R0 Transform {
	    rotation 1 0 1 0.9553 #(atan(sqrt(2))
	    children Transform {
		rotation 0 1 0 0.7854
		children IS children 
	    }
	}
	Transform {
	    rotation  0 1 0 3.1415
	    children USE R0
	}
	
	Transform {
	    rotation  1 1 -1 2.094
	    children USE R0
	}
	
	Transform {
	    rotation  1 1 -1 -2.094
	    children USE R0
	}	
	]
    }
    
}

PROTO OctahedronKaleidoscope [

field MFNode children []

]{
    Transform{
	rotation 0 1 0 0.7853
	children [
	DEF R4 Group{
	    children [
	    DEF R0 Transform {
		rotation 0 0 1 0.9535
		children IS children
	    }
	    Transform {
		rotation 0 1 0 1.5708
		children USE R0
	    }
	    Transform {
		rotation 0 1 0 -1.5708
		children USE R0
	    }
	    Transform {
		rotation 0 1 0 3.1415
		children USE R0
	    }
	    ]
	}
	Transform {
	    rotation 0 0 1 3.1415
	    children USE R4
	}
	]
    }
}

PROTO DodecahedronKaleidoscope [

field MFNode children []

]{
    Group {
	children [
	DEF SEG4 Group {
	    children [
	    DEF SEG2 Group {	    
		children [
		DEF SEG1 Transform {
		    rotation 0 1 0 1.5708
		    children Transform {
			rotation 0 0 1 -0.5535
			children IS children 	
		    }
		}
		Transform {
		    rotation 0 1 0 3.1415
		    children USE SEG1
		}
		]	    
	    }
	    Transform {
		rotation 1 0 0 3.1415
		children USE SEG2
	    }	
	    ]	
	}
	Transform {
	    rotation 1 1 -1 2.0944
	    children USE SEG4
	}
	Transform {
	    rotation 1 1 -1 -2.0944
	    children USE SEG4
	}
	]
    }  

}

PROTO CubeKaleidoscope [

field MFNode children []

]{
    Group {
	children [
	DEF SEG4 Group {
	    children [
	    DEF SEG2 Group {	    
		children IS children
	    }
	    Transform {
		rotation 1 0 0 3.1415
		children USE SEG2
	    }	
	    ]	
	}
	Transform {
	    rotation 1 1 -1 2.0944
	    children USE SEG4
	}
	Transform {
	    rotation 1 1 -1 -2.0944
	    children USE SEG4
	}
	]
    }  

}



PROTO Triangle6 [
exposedField MFString url []
]{
    Group {
	
	children [
	DEF SEGMENT Group {
	    children [
	    DEF S1 KaleidoCanvas {
        geometry Triangle1{}
          url IS url
	    }
	    Transform {
        rotation 0.25 0 0.433 3.1415926
        children USE S1
	    }
	    ]
	}
	
	Transform {
	    rotation 0 1 0 2.0943
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 -2.0943
	    children USE SEGMENT
	}
	]
    }
    
}

PROTO Triangle8 [
exposedField MFString url []
]{
    Group {
	
	children [

	DEF SEGMENT Group {

	    children [
	    DEF S1 KaleidoCanvas{
		geometry Triangle3{}	 
		url IS url
	    }

	    Transform {
		rotation 1 0 1 3.1415
		children USE S1
	    }

	    ]
	}
	
	Transform {
	    rotation 0 1 0 1.5708
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 -1.5708
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 3.1415
	    children USE SEGMENT
	}
	]
    }    
}

PROTO Triangle10 [
exposedField MFString url []
]{
    Group {
	
	children [
	DEF SEGMENT Group {
	    children [
	    DEF S1 KaleidoCanvas{
		geometry Triangle5{}	 
		url IS url
	    }
	    Transform {
		rotation 0.6545 0 0.4755 3.1415
		children USE S1
	    }
	    ]
	}
	
	Transform {
	    rotation 0 1 0 1.2566
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 -1.2566
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 2.5132
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 -2.5132
	    children USE SEGMENT
	}
	]
    }
    
}

PROTO Triangle11 [
exposedField MFString url []
]{
    Group {
	
	children [
	DEF SEGMENT Group {
	    children [
	    DEF S1 KaleidoCanvas{
		geometry Triangle4{}	 
		url IS url
	    }
	    Transform {
		rotation 0.6545 0 0.4755 3.1415
		children USE S1
	    }
	    ]
	}
	
	Transform {
	    rotation 0 1 0 1.2566
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 -1.2566
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 2.5132
	    children USE SEGMENT
	}
	Transform {
	    rotation 0 1 0 -2.5132
	    children USE SEGMENT
	}
	]
    }
    
}


PROTO GreatIcosahedron [
exposedField MFString url []
]{

    IcosahedronKaleidoscope { 
	children Transform {
	    translation 0 0.19 0 rotation 0 1 0 3.1415 # great icosahedron
	    children Triangle6{
        url IS url
	    }
	}    
    }
}

PROTO Icosahedron [
exposedField MFString url []
]{
    IcosahedronKaleidoscope {
	children Transform {
	    translation 0 1.3 0 # icosahedron
	    children Triangle6 {
        url IS url
	    }
	}    
    }
}

PROTO Tetrahedron [
exposedField MFString url []
]{
    TetrahedronKaleidoscope {
      children Transform {
          translation 0 -0.352 0
          children Triangle6 {
            url IS url
          }
      }    
    }    
}

PROTO Octahedron [
exposedField MFString url []
]{
    OctahedronKaleidoscope {
	children Transform {
#	    translation 0 0.703 0 
	    translation 0 0.704 0 
	    children Triangle6{
		url IS url
	    }
	}    
    }     
}


PROTO Cube [
exposedField MFString url []
]{
 CubeKaleidoscope {
     children Transform {
	translation 0 1 0 
	children Triangle8{
	   url IS url
        }
     }    
 }
}

PROTO Dodecahedron [
exposedField MFString url []
]{
    DodecahedronKaleidoscope { # dodecahedron
	children Transform {
	    translation 0 1.30 0 
	    children Triangle10{
		url IS url
	    }
	}    
    }
}


PROTO GreatDodecahedron [
exposedField MFString url []
]{
    DodecahedronKaleidoscope { # great dodecahedron
	children Transform {
	    translation 0 -0.5 0 
	    children Triangle10{
		url IS url
	    }
	}    
    }
}

PROTO GreatStellatedDodecahedron [
exposedField MFString url []
]{    
    DodecahedronKaleidoscope { # great stellated dodecahedron
	children Transform {
	    translation 0 0.19 0 
	    children Triangle11{
		url IS url
	    }
	}    
    }
}


PROTO SmallStellatedDodecahedron [
exposedField MFString url []
]{
    DodecahedronKaleidoscope { # small stellated dodecahedron
	children Transform {
	    translation 0 -0.5 0 
	    children Triangle11{
		url IS url
	    }
	}    
    }
}

PROTO Roller [
exposedField MFNode object Group{}
exposedField SFRotation rotation 1 0 0 0
exposedField SFRotation offset  1 0 0 0
field SFBool automatic TRUE
]
{
    Group{
        children[
        DEF PLANE Transform{
	    
	    children[
	    DEF ROTATOR PlaneSensor { 
		autoOffset        FALSE #TRUE
		enabled           TRUE
		#offset IS offset
	    }

	    DEF ROTATOR_TRANSFORM Transform{
		rotation IS rotation
		scaleOrientation IS offset # dummy 
		children IS object
	    }
	    ]
            
        }

	]
    }

    # to watch for 
    DEF PROXI ProximitySensor{
	size 1.e10 1.e10 1.e10
    }

    DEF ANIMATOR TimeSensor{
	enabled FALSE
	loop TRUE
    }

    DEF SCRIPT Script{

	directOutput TRUE
	eventIn SFVec3f set_rotation
	eventIn SFVec3f set_rotation_roller
	eventIn SFBool set_active
	eventIn SFVec3f set_position
	eventIn SFTime set_time

	field SFVec3f mouse0  0 0 0
	field SFVec3f mouse1  0 0 0
	field SFTime time0 0
	field SFTime time1 0
	field SFBool start TRUE
	field SFRotation rotation 1 0 0 0
	field SFRotation offset 1 0 0 0
	field SFBool start_position_flag TRUE
	field SFVec3f start_position  0 0 0
	field SFNode plane USE PLANE
	field SFNode rotator USE ROTATOR_TRANSFORM
	field SFVec3f speed 0 0 0
	field SFNode animator USE ANIMATOR
	field SFBool automatic IS automatic
	
	field SFRotation r 1 0 0 0
	field SFRotation r_neg 1 0 0 0
	field SFRotation r1 1 0 0 0
	field SFRotation r2 1 0 0 0
	field SFRotation r1_neg 1 0 0 0
	field SFRotation result 1 0 0 0
	field SFRotation result1 1 0 0 0

	field SFFloat radius 3

	url[
	"javascript:

	function from_quaternion(q) {
	    angle = Math.acos(q[3]) * 2.0;
	    s = Math.sin(angle / 2.0);
	    if(s == 0.0){
	      s     = 1;
              angle = 0.0;
	    }
	    q[0]/=s;q[1]/=s; q[2]/=s;
	    q[3] = angle;
	}

	function to_quaternion(r){
	    s = Math.sin(r[3]/2.0);
	    r[0] *= s; r[1] *= s; r[2] *= s; r[3] = Math.cos(r[3] / 2.0);
	}

	function multiply_quaternion(q1, q2, result) {
	    result[0] = q2[3] * q1[0] + q2[0] * q1[3] +
	    q2[1] * q1[2] - q2[2] * q1[1];
	    result[1] = q2[3] * q1[1] + q2[1] * q1[3] +
               q2[2] * q1[0] - q2[0] * q1[2];
            result[2] = q2[3] * q1[2] + q2[2] * q1[3] +
               q2[0] * q1[1] - q2[1] * q1[0];
	    result[3] = q2[3] * q1[3] - q2[0] * q1[0] -
               q2[1] * q1[1] - q2[2] * q1[2];
	}

	function cross(p,q,result){
	    result[0] = p[1]*q[2]-p[2]*q[1];
	    result[1] = p[2]*q[0]-p[0]*q[2];
	    result[2] = p[0]*q[1]-p[1]*q[0];
	}

	function dot(p,q){
	    s = p[0]*q[0]+p[1]*q[1]+p[2]*q[2];
	    return s;
	}
	

	function normalize(p){
	    s = p[0]*p[0]+p[1]*p[1]+p[2]*p[2];
	    q = p;
	    if(s != 0.0){
		s = Math.sqrt(s);
		q[0] = q[0]/s;
		q[1] = q[1]/s;
		q[2] = q[2]/s;
	    }
	    return q;
	}

	function set_position(val,time){
	    value = val; // to protect formal variable
	    if(start_position_flag){
		start_position_flag = FALSE;
		start_position = normalize(value);
	    } else {		

		value = normalize(value);
		cross(start_position,value,result);
		result = normalize(result);
		angle = Math.acos(dot(start_position,value));
		
		r[0] = result[0];
		r[1] = result[1];
		r[2] = result[2];
		r[3] = angle;
		to_quaternion(r);
		r_neg[0] = -r[0];
		r_neg[1] = -r[1];
		r_neg[2] = -r[2];
		r_neg[3] =  r[3];
		
		r1 = plane.rotation;
		to_quaternion(r1);
		r1_neg[0] = -r1[0];
		r1_neg[1] = -r1[1];
		r1_neg[2] = -r1[2];
		r1_neg[3] = r1[3];
		
		multiply_quaternion(r1,r,result);
		from_quaternion(result);
		plane.rotation = result;
				
                // to compensation rotator's rotation
                // 
		r2 = rotator.rotation;
		to_quaternion(r2);

		multiply_quaternion(r2,r1,result);
		multiply_quaternion(result,r_neg,result1);
		multiply_quaternion(result1,r1_neg,result);
		from_quaternion(result);
		rotator.rotation = result;
		start_position = value;

	    }
	    //trace(value + ' '+ plane.rotation);
	}

	function set_rotation_roller(value, time){

	    if(start == TRUE){

		mouse1 = value;
		mouse0 = value;
		start = FALSE;
		time0 = time;
		time1 = time;

	    } else{

		mouse0 = mouse1;
		mouse1 = value;
		//radius = mouse1.length();
		//trace(mouse1);
		dx = (mouse1[0]-mouse0[0])/radius;
		dy = (mouse1[1]-mouse0[1])/radius;
		r1 = rotator.rotation_changed;
		to_quaternion(r1);
		r2[0] = -dy;
		r2[1] = dx;
		r2[2] = 0;
                r2[3] = Math.sqrt(dx*dx+dy*dy);
		r2 = normalize(r2);
		to_quaternion(r2);
		multiply_quaternion(r1,r2,result);
		from_quaternion(result);
                rotator.set_rotation = result;
		time0 = time1;
		time1 = time;

		dt = time1 - time0;
		var factor = Math.exp(-2*dt);
		var f1 = 1-factor;
		if(dt != 0){		    
		    speed[0] = factor*speed[0] + f1*dx/dt;
		    speed[1] = factor*speed[1] + f1*dy/dt;
		} else {
		    speed[0] = factor*speed[0];
		    speed[1] = factor*speed[1];
		}
	    }	    

	}

	function set_active(value, time){

	    //trace('set_active ' + value);

	    if(value){

		start = TRUE;
		animator.enabled = FALSE;
		time0 = time;
		time1 = time;
		speed[0] = 0;
		speed[1] = 0;
		animator.enabled = FALSE;

	    } else if(time1 != time0){ // if there was a drag

		dt = time - time0;
		//trace('time1 != time0: '+ dt);
		// speed of automatic should be calculated now
		// to limit speed in case fast movementy and stop
		
		if(dt != 0.0){
		    var factor = Math.exp(-10*dt);
		    var f1 = 1-factor;
		    speed[0] = factor*speed[0];
		    speed[1] = factor*speed[1];
		    //trace('dt: '+ dt +  ' factor: ' + factor);
		} else {
		    speed[0] = 0;
		    speed[1] = 0;
		    //trace('dt == 0.0');
		}
		
		if(automatic && // arbitrary limitation of speed
                   (Math.abs(speed[0]) > 0.01 || 
		    Math.abs(speed[1]) > 0.01)){
		    animator.enabled = TRUE;
		    //trace('start'+ speed);
		} else {
		    //trace('stop' + speed);
		}		
	    }
	}
	
	function set_time(value,time){

	    dt = (time-time0);

	    dx = speed[0]*dt;
	    dy = speed[1]*dt;

	    r1 = rotator.rotation;
	    
	    to_quaternion(r1);
	    r2[0] = -dy; r2[1] = dx; r2[2] = 0;
	    r2[3] = Math.sqrt(dx*dx+dy*dy);
	    r2 = normalize(r2);
	    to_quaternion(r2);
	    multiply_quaternion(r1,r2,result);
	    from_quaternion(result);
	    rotator.rotation = result;
	    //rotator.rotation = rotator.rotation.multiply(r2);

	    time0 = time;
	    //Browser.setDescription(' ' + Browser.getCurrentFrameRate());
	}

	"
	]

    }

    ROUTE ROTATOR.trackPoint_changed  TO SCRIPT.set_rotation_roller
    ROUTE ROTATOR.isActive  TO SCRIPT.set_active
    ROUTE PROXI.position_changed  TO SCRIPT.set_position
    ROUTE ANIMATOR.time TO SCRIPT.set_time
}


PROTO Slider [
eventOut     SFFloat value_changed
field SFFloat value 0.5
eventIn     SFFloat set_value
field SFString description "slider"
exposedField MFNode thumb Shape {
    geometry Box{
	size 0.1 0.1 0.02
    }
    appearance	Appearance {
	material	Material {
	    ambientIntensity 0.25
	    diffuseColor 1. 0.3 0.3
	    shininess	1
	}
    }
}

exposedField MFNode slide Shape {
    geometry Box {
	size 0.06 1.101 0.01 
    }
    appearance	Appearance {
	material	Material {
	    ambientIntensity	0.25
	    diffuseColor	0.6 0.6 0.6
	    shininess	1
	}
	
    }
    
}    
]
{
    Group {
	children [

	
	DEF TOUCH TouchSensor {
	}
	Transform {
	    #translation 0 0.5 0
	    children IS slide		
	}
	
	Transform {
	    children [
	    DEF SENSOR PlaneSensor {
		minPosition	0. -0.5
		maxPosition	0. 0.5
		offset	0 0 0
		autoOffset	TRUE
	    }
	    DEF THUMB Transform {
		children IS thumb		    
	    }
	    ]
	}
	]
    }

    DEF SCRIPT Script {
	
	eventOut SFFloat value_changed IS value_changed
	eventOut SFVec3f translation_changed
	
	eventIn SFBool setOver
	eventIn	SFVec3f set_translation
	eventIn	SFFloat set_value IS set_value
	
	field SFFloat value IS value
	field SFString description IS description

	
	url [
	"javascript:

	function set_value(val, time){
	    translation_changed[0] = 0;
	    translation_changed[1] = val-0.5;
	    value_changed = val;	    
	}
	
	function set_translation(val, time) {
	    translation_changed[0] = 0;
	    translation_changed[1] = val[1];
	    value_changed = val[1]+0.5;
	}
	
	function initialize(val, time){
	    translation_changed[0] = 0;
	    translation_changed[1] = value-0.5;
	}
	function setOver(value,time){
	    is_over = value;
	    if(value){
		Browser.setDescription(description);
	    } else {
		Browser.setDescription('');
	    }
	}
	"
	]
    }
    
    ROUTE TOUCH.isOver TO SCRIPT.setOver    
    ROUTE SENSOR.translation_changed TO SCRIPT.set_translation
    ROUTE SCRIPT.translation_changed TO THUMB.set_translation
    # to make initial offset
    ROUTE SCRIPT.translation_changed TO SENSOR.set_offset
}

PROTO HUD [
  exposedField SFVec3f size 3.4e38 3.4e38 3.4e38
  exposedField SFVec3f translation 0.0 0.0 -20
  exposedField SFRotation rotation 0 0 0 0
  field MFNode children [] 
]
{
    Group {
	children [
	#
	# Make the sensor large enough to cover world
	#
	DEF UserPosition ProximitySensor {
            center 0 0 0
            size IS size
	}
	# 
	# Transform containing the HUD shape.
	# Gets its translation and rotation values from HUDProx.  The
	# origin of the transformed space will be at the Viewpoint.
	# The HUD shape objects are offset to make them visible (outside
	# the inner clipping plane).
	#
	DEF HUD Transform
	{
            children [
	    Transform {
		children [
		# Offset HUD objects relative to viewpoint by a -ve Z
		# value such that it is not clipped by near clipping
		# plane and is inside the collision radius defined by the
		# avatar size so the HUD does not get occluded by objects
		# when you bump into them.
		Transform {
		    translation IS translation
		    rotation IS rotation
		    # The HUD shape itself
		    children IS children 		    
		}
		]
	    }
	    ]
	}		
	#
	# The UserPosition and orientation is routed to the HUD Transform
	# thus HUD moves with  user.
	#
	# end of HUD	
    ]
    }
    ROUTE UserPosition.position_changed TO HUD.translation
    ROUTE UserPosition.orientation_changed TO HUD.rotation
} # end of HUD PROTO


PROTO RadioButton [
eventOut SFBool isPressed
eventOut SFTime timePressed 
eventOut SFInt32 state_changed
eventIn  SFBool set_pressed
field SFInt32 data 0
field MFNode shapes[ 
Group {
    children [
    Shape { 
	geometry Box { size 0.7 0.7 0.2 }
	appearance Appearance { material Material { diffuseColor 0.4 0.4 0.9 }}
	
    }
    Shape { 
	geometry Box { size 0.85 0.85 0.18 }
	appearance Appearance { material Material { diffuseColor 0.9 0.4 0.4 }}
	
    }
    ]
}
Shape { 
    geometry Box { size 0.8 0.8 0.2 }
    appearance Appearance { material Material { diffuseColor 0.4 0.4 0.9 }}
}
]
field SFString description "click here"
]{

    Group{
	children[
	DEF BUTTON TouchSensor{}
	DEF SHAPE Group {
	}
	]
    }
    
    DEF SCRIPT Script {
	directOutput TRUE
	eventIn SFBool setOver
	eventIn SFBool setActive
	eventIn SFBool set_pressed IS set_pressed
	
	eventOut SFBool isPressed IS isPressed
	eventOut SFTime timePressed IS timePressed
	eventOut SFInt32 state_changed IS state_changed
	
	field SFInt32 data IS data

	field SFNode shape USE SHAPE
	field MFNode shapes IS shapes

	field SFString description IS description
	field SFBool is_over FALSE
	field SFBool is_active FALSE
	field SFBool is_pressed FALSE

	url [
	"javascript:
	function initialize(){
	    shape.children[0] = shapes[1];	    
	}
	function set_pressed(value,time){
	    is_pressed = value;
	    if(is_pressed){
		shape.children[0] = shapes[0];
	    } else {
		shape.children[0] = shapes[1];
	    }
	}

	function setActive(value,time){
	    //print('button.setActive('+value+','+time+')');
	    timePressed = time;
	    if(value){
		if(is_pressed){
		    is_pressed = FALSE;
		    isPressed = FALSE;
		    state_changed = (data | 0x1000);
		    //shape.children[0] = shapes[1];
		} else {
		    is_pressed = TRUE;
		    isPressed = TRUE;
		    state_changed = data;
		    //shape.children[0] = shapes[0];
		}
	    }
	}
	
	function setOver(value,time){
	    is_over = value;
	    if(value){
		Browser.setDescription(description);
	    } else {
		Browser.setDescription('');
	    }
	}
	
	"]
    }

    ROUTE BUTTON.isActive TO SCRIPT.setActive
    ROUTE BUTTON.isOver TO SCRIPT.setOver    
}

PROTO ButtonDown [
field MFString url []
]{    
    Group {
	children [
	Shape { 
	    geometry Box { size 0.7 0.7 0.2  }
	    appearance Appearance{
		material Material {
		    diffuseColor 0.5 0.5 0.5
		    shininess 1.0
		}
		texture ImageTexture{
		    url IS url
		}
	    }
	}
	Shape { 
	    geometry Box { size 0.85 0.85 0.19  }
	    appearance Appearance{
		material Material {
		    diffuseColor 1.0 0.5 0.5
		    shininess 1.0
		}
	    }	
	}
	]
    }
}
PROTO ButtonUp [
field MFString url []
]{    
    Shape { 
	geometry Box { size 0.7 0.7 0.2  }
	appearance Appearance{
	    material Material {
		diffuseColor 0.5 0.5 0.5
		shininess 1.0
	    }
	    texture ImageTexture{
		url IS url
	    }
	}
    }
}


Roller {
    object 
DEF SCALE Transform {
    scale 5 5 5
    children DEF SWITCH Switch {
      whichChoice 0
      choice [
      Tetrahedron{
          url "k00.jpg"
      }
      Octahedron{
          url "k00.jpg"
      }
      Cube{
          url "k00.jpg"
      }
      Icosahedron{
          url "k00.jpg"
      }
      Dodecahedron{
          url "k00.jpg"
      }
      GreatDodecahedron{
          url "k00.jpg"
      }
      GreatStellatedDodecahedron{
          url "k00.jpg"
      }
      SmallStellatedDodecahedron{
          url "k00.jpg"
      }
      GreatIcosahedron{
          url "k00.jpg"
      }
      ]
    }
}
}
HUD {
    translation 0.4 0 -1.3
    children [
    Transform {
	scale 0.7 0.7 0.7
	children [
	Transform {
	    translation 0.25 -0.5 0
	    scale 0.125 0.125 0.125
	    children [
	    Transform { translation 0 0 0 children DEF B0 PButton{data 0 
	      description "Tetrahedron" shapes [u06_d{} u06_u{}]}}
	    Transform { translation 0 1 0 children DEF B1 PButton{data 1 
	      description "Octahedron" shapes [u10_d{} u10_u{}]}}
	    Transform { translation 0 2 0 children DEF B2 PButton{data 2 
	      description "Cube" shapes [u11_d{} u11_u{}]}}
	    Transform { translation 0 3 0 children DEF B3 PButton{data 3 
	      description "Icosahedron" shapes [u27_d{} u27_u{}]}}
	    Transform { translation 0 4 0 children DEF B4 PButton{data 4 
	      description "Dodecahedron" shapes [u28_d{} u28_u{}]}}
	    Transform { translation 0 5 0 children DEF B5 PButton{data 5 
	      description "Great Dodecahedron" shapes [u40_d{} u40_u{}]}}
	    Transform { translation 0 6 0 children DEF B6 PButton{data 6 
	      description "Great Stellated Dodecahedron" shapes [u57_d{} u57_u{}]}}
	    Transform { translation 0 7 0 children DEF B7 PButton{data 7 
	      description "Small Stellated Dodecahedron" shapes [u39_d{} u39_u{}]}}
	    Transform { translation 0 8 0 children DEF B8 PButton{data 8 
	      description "Great Icosahedron" shapes [u58_d{} u58_u{}]}}

	    Transform { 
		translation 1 0 0 
		children DEF P0 RadioButton{
		    data 0 description "pattern 0" 
		    shapes[ 
          ButtonDown { url "k00.jpg"}
          ButtonUp { url "k00.jpg"}
		    ]
		}   
	    }
	    Transform { 
		translation 1 1 0 
		children DEF P1 RadioButton{
		    data 1 description "pattern 1"
		    shapes[ 
		    ButtonDown { url "k01.jpg"}
		    ButtonUp { url "k01.jpg"}
		    ]
		}   
	    }
	    Transform { 
		translation 1 2 0 
		children DEF P2 RadioButton{
		    data 2 description "pattern 2"
		    shapes[ 
		    ButtonDown { url "k02.jpg"}
		    ButtonUp { url "k02.jpg"}
		    ]
		}   
	    }
	    Transform { 
		translation 1 3 0 
		children DEF P3 RadioButton{
		    data 3 description "pattern 3"
		    shapes[ 
		    ButtonDown { url "k03.jpg"}
		    ButtonUp { url "k03.jpg"}
		    ]
		}   
	    }
	    Transform { 
		translation 1 4 0 
		children DEF P4 RadioButton{
		    data 4 description "pattern 4"
		    shapes[ 
		    ButtonDown { url "k04.jpg"}
		    ButtonUp { url "k04.jpg"}
		    ]
		}
	    }
	    Transform { 
		translation 1 5 0 
		children DEF P5 RadioButton{
		    data 5 description "pattern 5"
		    shapes[ 
		    ButtonDown { url "k05.jpg"}
		    ButtonUp { url "k05.jpg"}
		    ]
		}
	    }
	    Transform { 
        translation 1 6 0 
        children DEF P6 RadioButton{
            data 6 description "pattern 6"
            shapes[ 
            ButtonDown { url "k06.jpg"}
            ButtonUp { url "k06.jpg"}
            ]
        }   
	    }
	    Transform { 
        translation 1 7 0 
        children DEF P7 RadioButton{
            data 7 description "pattern 7"
            shapes[ 
            ButtonDown { url "k07.jpg"}
            ButtonUp { url "k07.jpg"}
            ]
        }
	    }
	    Transform { 
        translation 1 8 0 
        children DEF P8 RadioButton{
            data 8 description "pattern 8"
            shapes[ 
            ButtonDown { url "k08.jpg"}
            ButtonUp { url "k08.jpg"}
            ]
        }   
	    }
	    ]
	}
	Transform {
	    translation 0.5 0 0
	    children DEF SLIDER_SCALE Slider {
		value 0.5
		description "scale slider"
	    }
	}

	Anchor { 
	    url ["index.html"]
	    parameter [ "target=help_window" ]
	    description "help on Kaleidoscope"
	    children [
	    Transform {
		scale 0.1 0.1 0.1
		translation 0.5 -0.65 0
		children Shape {
		    geometry Box{
			size 1 1 0.3
		    }
		    appearance Appearance {
			material Material {
			    diffuseColor 0.5 0.5 0.5
			}
			texture ImageTexture {
			    url "help.jpg"
			}
		    }
		}
	    }
	    ]
	    
	}
	]
    }
    ]
}

DEF TIMER TimeSensor {    
    loop TRUE
}	

DEF SCRIPT Script {
    directOutput TRUE
    
    eventIn SFTime init
    eventIn SFInt32 set_poly
    eventIn SFInt32 set_pattern

    field SFNode myself USE SCRIPT
    field SFNode timer USE TIMER
    field SFNode poly USE SWITCH
    field SFInt32 currentChoice 1
    field SFInt32 maxChoice 8
    field MFNode buttons [ USE B0 USE B1 USE B2 USE B3 USE B4 USE B5 USE B6 USE B7 USE B8 ]
    field MFNode pbuttons [ USE P0 USE P1 USE P2 USE P3 USE P4 USE P5 USE P6 USE P7 USE P8 ]
    field MFString patterns ["k00.jpg","k01.jpg","k02.jpg","k03.jpg","k04.jpg",
    "k05.jpg","k06.jpg","k07.jpg","k08.jpg"] 
    
    field SFInt32 currentPattern 0

    url [
    "javascript:
    
    function init(value, time){

        timer.enabled = FALSE;

        buttons[currentChoice].set_pressed = TRUE;
        pbuttons[currentPattern].set_pressed = TRUE;
        poly.whichChoice = currentChoice;	

        for(i=0; i < buttons.length; i++){
            Browser.addRoute(buttons[i],'state_changed',
            myself,'set_poly');
            Browser.addRoute(pbuttons[i],'state_changed',
            myself,'set_pattern');
        }

    }
    
    function set_poly(value, time){

      if(((value & 0x1000) == 0) && value != currentChoice){

          buttons[currentChoice].set_pressed = FALSE;	
          currentChoice = value;
          buttons[currentChoice].set_pressed = TRUE;			

          //poly.choice[currentChoice].set_url = 
          //       new MFString (patterns[currentPattern]);	

          poly.whichChoice = currentChoice;	
      }
    }

    function set_pattern(value, time){
      if(((value & 0x1000) == 0) && value != currentPattern){

          pbuttons[currentPattern].set_pressed = FALSE;	
          currentPattern = value;
          pbuttons[currentPattern].set_pressed = TRUE;			
          var u = new MFString (patterns[currentPattern]);	
          for(i = 0; i <= maxChoice; i++ ){
            poly.choice[i].set_url = u;
          }
          //poly.choice[currentChoice].set_url = 
          //       new MFString (patterns[currentPattern]);	
      }
    }
    
    "
    ]
}

ROUTE TIMER.time TO SCRIPT.init

DEF INTERPOLATOR PositionInterpolator{
    key [0,0.5,1]
    keyValue[
    0.0001 0.0001 0.0001,
    5 5 5,
    20 20 20
    ]
}

ROUTE SLIDER_SCALE.value_changed TO INTERPOLATOR.set_fraction
ROUTE INTERPOLATOR.value_changed TO SCALE.set_scale

