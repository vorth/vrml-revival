#VRML V2.0 utf8

WorldInfo{
    title "Graph2iso proto"
    info [
    "author"
    "   bulatov@dots.physics.orst.edu",
    ]
}

NavigationInfo { 
    type "NONE" 
    headlight TRUE
} 

Viewpoint {
    position 0 0 100
    fieldOfView 0.025
}

Background {
#groundColor [1 1 1]
skyColor [0.6 0.8 1]
}


PROTO Data2d [
exposedField SFInt32 xDimension 1
exposedField SFInt32 yDimension 1
exposedField SFFloat xSpacing 1
exposedField SFFloat ySpacing 1
exposedField SFFloat xmin 0
exposedField SFFloat ymin 0
exposedField MFFloat data1 [1]
exposedField MFFloat data2 []
eventOut SFBool isReady
]{
    DEF SCRIPT_DATA2D Script {

	eventOut SFBool isReady IS isReady

	url [
	"javascript:

	function initialize(){

	    trace('Data2d.initialize');

	    isReady = TRUE;
	}
	"
	]
    }
}


PROTO Graph2iso [

field SFNode data2d NULL # node of type Data2d is assumed 
eventIn SFNode set_data 

]{

    DEF TRANSFORM Transform {
	rotation 1 0 0 1.5708
	#scale 1 1 -1
	children [
	DEF SHAPE Shape {
	    geometry NULL
	    appearance Appearance {
		texture DEF PIXELTEXTURE PixelTexture {
		    repeatS FALSE
		    image 2 1 3 0xFFFF00 0x77FF
		    #image  2 1 4 0xFFFF00FF 0x77FF00
		    #image  3 1 4 0xFFFF00FF 0xFFFF0080 0x77FF00
		}
		textureTransform DEF TEXTURE_TRANSFORM TextureTransform {
#		    scale 0.25 0.25
		}
		material Material {
		    ambientIntensity 1
		}
	    }
	}
	DEF TOUCHSENSOR TouchSensor{
	}
	]
	
    }

    DEF SCRIPT_ISO Script{

	directOutput TRUE
	
	eventIn SFVec3f set_point  
	eventIn SFNode set_data IS set_data  

	field SFNode data IS data2d
	field SFNode transform USE TRANSFORM
	field SFNode shape USE SHAPE

	field SFNode myself USE SCRIPT_ISO
	field SFNode pixels USE PIXELTEXTURE 
	field SFFloat tex_min -2
	field SFFloat tex_max 2


	# to inform, that data are ready
	eventIn SFBool setReady 

	url [
	"javascript:

	function initialize(){
	    if(data == null){
		return;
	    }	    
	    
	    if(data.isReady){
		init();
	    } else {
		Browser.addRoute(data,'isReady',myself,'setReady');
	    }
	}

	function set_data(value, time){
	    trace('graph.set_data: ' + value);
	    data = value;
	    if(data.isReady){
		init();
	    } else {
		Browser.addRoute(data,'isReady',myself,'setReady');
	    }
	}

	function setReady(value, time){
	    trace('setReady');
	    // Browser.deleteRoute(data,'isReady',myself,'setReady');
	    init();
	}

	function init(){
	    trace(data.xSpacing);
	    trace(data.ySpacing);
	    trace(data.xDimension);
	    trace(data.yDimension);
                   
	    grid = Browser.createVrmlFromString(
	    'ElevationGrid{ ' + 
	    ' xSpacing '+ data.xSpacing + 
	    ' zSpacing '+ data.ySpacing + 
	    ' xDimension ' + data.xDimension +
	    ' zDimension ' + data.yDimension +
	    ' solid FALSE' +
	    ' creaseAngle 1' +
	    '}')[0];
	    

	    var point = new MFVec2f();
	    var data2 = data.data2;
	    var xdim = data.xDimension;
	    var ydim = data.yDimension;
	    dt = tex_max - tex_min;
	    if(data2.length == 0){
		point[i] = new SFVec2f( 0 , 0);;
	    } else {
		for(i = 0; i < data2.length; i++ ){
		    var t = data2[(i % xdim) + (ydim-1-Math.floor(i/xdim))*xdim];
		    t = (t-tex_min)/dt;
		    point[i] = new SFVec2f( t , 0);
		}
	    }

	    texture = Browser.createVrmlFromString(
	    'TextureCoordinate {}'
	    )[0];

	    var height = new MFFloat();
	    if(data.data1.length == 0){
		var len = data.xDimension * data.yDimension;
		for(i = 0; i < len; i++ ){
		    height[i] = 0;
		}
	    } else {
		data1 = data.data1;
		for(i = 0; i < data1.length; i++ ){
		    height[i] = data1[(i % xdim) + 
                                (ydim-1-Math.floor(i/xdim))*xdim];
		}		
	    }

	    texture.set_point = point;
	    grid.set_texCoord = texture;

	    grid.set_height = height;
	    shape.set_geometry = grid;
	    transform.set_translation = 
	      new SFVec3f( data.xmin,
	                   (data.yDimension-1)*data.ySpacing + data.ymin, 
	                   0
	    );	    

	    set_image3();
	}

	function set_image3(){

	    var pix = new MFInt32();
	    var Npix = 256*2;
	    for( i = 0; i < 256; i++){
		j = (i<<2) & 0xFF;
		j = (j + 255) >> 1;
		pix[i] = ((j >> 1) << 16) | ((j >> 1)<<8) | j ;
	    }
	    for( i = 0; i < 256; i++){
		j = ((255-i)<<2) & 0xFF;
		j = (j + 255) >> 1;
		pix[i+256] = (j<<16) | ((j>>1)<<8) | (j>>1) ;
	    }
	    pixels.set_image = new SFImage(Npix,1,3,pix);

	}

	function set_image4(){

	    var pix = new MFInt32();
	    var Npix = 256;
	    for( i = 0; i < 256; i++){
		pix[i] = ((0xFF<<16) | (i << 8) )<<8 | (i);
	    }
	    pixels.set_image = new SFImage(Npix,1,4,pix);

	}

	function round(v){


	    if(v == 0){
		return 0;
	    }
	    var s = 1;
	    if( v < 0){
		s = -1;
		v *= -1;
	    }

	    factor = 1;
	    while(Math.floor(v*factor) == 0){
		factor *= 10;
	    }
	    factor *= 100;
	    var f = s*Math.floor(v*factor+0.5)/factor;
	    //trace(v
	    return f;
	}

	function set_point(value, time){
	    if(data.data2.length == 0){

		Browser.setDescription('pnt: ['+
		round(value[0]+data.xmin)+','+
		round(value[2]+data.ymin)+']' + 
		'  data: ' + round(value[1]));
	    } else if(data.data1.length == 0){

		x = value[0]/data.xSpacing;
		y = data.yDimension-1 - value[2]/data.ySpacing;
		xx = Math.floor(x);
		yy = Math.floor(y);
		x1 = x-xx;
		y1 = y-yy;
		xdim = data.xDimension;yyxdim = yy*xdim;
		v00 = data.data2[xx  +yyxdim];
		v10 = data.data2[xx+1+yyxdim];
		v11 = data.data2[xx+1+yyxdim+xdim];
		v01 = data.data2[xx  +yyxdim+xdim];

		v = v00*(1-x1)*(1-y1) + v10*x1*(1-y1) + 
		    v01*(1-x1)*y1 + v00*x1*y1;
		Browser.setDescription('pnt: [ '+round(value[0]+data.xmin)+
		' , ' + round(y*data.ySpacing + data.ymin)+' ]' + 
		' data: ' + round(v));		
	    } else {
		x = value[0]/data.xSpacing;
		y = value[2]/data.ySpacing;
		xx = Math.floor(x);
		yy = Math.floor(y);
		x1 = x-xx;
		y1 = y-yy;
		
		v00 = data.data2[xx  +yy*data.xDimension];
		v10 = data.data2[xx+1+yy*data.xDimension];
		v11 = data.data2[xx+1+(yy+1)*data.xDimension];
		v01 = data.data2[xx  +(yy+1)*data.xDimension];

		v = v00*(1-x1)*(1-y1) + v10*x1*(1-y1) + 
		    v01*(1-x1)*y1 + v00*x1*y1;
		Browser.setDescription('pnt: [ '+round(value[0]+data.xmin)+
		' , ' + round(value[2]+data.ymin)+' ]' + 
		'  d1: ' + round(value[2]) + ' d2: ' + round(v));

	    }
	}
	"
	]
    }

    ROUTE TOUCHSENSOR.hitPoint_changed TO SCRIPT_ISO.set_point

    DEF TIMER TimeSensor {
 	enabled FALSE #TRUE
	loop TRUE	
    }

    DEF ANIMATION_SCRIPT Script {
	directOutput TRUE
	eventIn SFTime set_time 
	field SFNode texture USE TEXTURE_TRANSFORM 
	field SFBool start TRUE
	field SFTime old_time 0
	url [
	"javascript:
	function set_time(value, time){
	    if(start){
		start = FALSE;
		old_time = time;		
	    } 
	    dt = time - old_time;
	    //trace(dt);
	    texture.set_translation = new SFVec2f(0.05*dt, 0);
	}

	"
	]
    }
    ROUTE TIMER.time TO ANIMATION_SCRIPT.set_time
}

PROTO Cubics [
eventOut SFInt32 xDimension 
eventOut SFInt32 yDimension 
eventOut SFFloat xSpacing 
eventOut SFFloat ySpacing 
eventOut MFFloat data1 
eventOut MFFloat data2 
eventOut SFBool isReady 
]{
    DEF TEST ScalarInterpolator {
    }

    DEF SCRIPT_CUBICS Script {

	directOutput TRUE

	eventOut SFInt32 xDimension IS xDimension 
	eventOut SFInt32 yDimension IS yDimension 
	eventOut SFFloat xSpacing IS xSpacing
	eventOut SFFloat ySpacing IS ySpacing
	eventOut MFFloat data1 IS data1
	eventOut MFFloat data2 IS data2
	eventOut SFBool isReady IS isReady

	
	field SFInt32 _xDimension 21 
	field SFInt32 _yDimension 21 
	field SFFloat _xSpacing 0.1
	field SFFloat _ySpacing 0.1
	field MFFloat _height []
	field SFFloat xmin -1
	field SFFloat ymin -1
	
	url [
	"javascript:

	function initialize(){

	    _height = new MFFloat();
	    _color = new MFFloat();
	    count = 0;

	    for(y = 0; y < _yDimension; y++){
		yy = ymin + y * _ySpacing;
		for(x = 0; x < _xDimension; x++){
		    xx = xmin + x * _xSpacing;
		    var f = 10*(xx*xx*xx-xx)*(yy*yy*yy-yy)+0.2*(xx+2*yy);
		    _color[count] = f;
		    _height[count] = 0.2*(f*f);
		    Math.sin(3*yy*Math.PI);
		    count ++;
		}
	    }
	    data1 = _height;
	    data2 = _color;

	    ySpacing = _ySpacing;
	    xSpacing = _xSpacing;
	    xDimension = _xDimension;
	    yDimension = _yDimension;
	    isReady = TRUE;
	    trace(xSpacing);
	    trace(ySpacing);
	    trace('Data2d.initialize');
	}
	"
	]
    }
}

PROTO CoulombPotential [
eventOut SFInt32 xDimension 
eventOut SFInt32 yDimension 
eventOut SFFloat xSpacing 
eventOut SFFloat ySpacing 
eventOut SFFloat xmin 
eventOut SFFloat ymin 
eventOut MFFloat data1 
eventOut MFFloat data2 
eventOut SFBool isReady 

field MFVec3f positions[]
field MFFloat charges[]
field SFInt32 xGrid 21
field SFInt32 yGrid 21

eventIn MFFloat set_charges
eventIn MFVec3f set_positions
eventIn SFBool recalculate

]{
    DEF TEST ScalarInterpolator {
    }

    DEF SCRIPT_CHARGES Script {

	directOutput TRUE

	eventOut SFInt32 _xDimension IS xDimension 
	eventOut SFInt32 _yDimension IS yDimension 
	eventOut SFFloat _xSpacing IS xSpacing
	eventOut SFFloat _ySpacing IS ySpacing
	eventOut SFFloat _xmin IS xmin
	eventOut SFFloat _ymin IS ymin
	eventOut MFFloat _data1 IS data1
	eventOut MFFloat _data2 IS data2
	eventOut SFBool isReady IS isReady

	eventIn MFFloat set_charges IS set_charges
	eventIn MFVec3f set_positions IS set_positions
	eventIn SFBool  recalculate IS recalculate
	
	field SFInt32 xDimension IS xGrid 
	field SFInt32 yDimension IS yGrid
	field SFFloat xSpacing 0.1
	field SFFloat ySpacing 0.1
	
	field MFVec3f positions IS positions
	field MFFloat charges IS charges


	url [
	"CoulombPotential.class", 
	"javascript:

	function set_charges(val, time){
	    charges = val;
	    isReady = FALSE;
	}
	function set_positions(val, time){
	    positions = val;
	    isReady = FALSE;
	}
	function recalculate(val, time){
	    init();
	}

	function initialize(){
	    init();
	}

	function init(){
	    if(charges.length == 0 || 
	       positions.length == 0){
		return;
	    }
	    var xmin = positions[0][0];
	    var ymin = positions[0][1];
	    var xmax = xmin;
	    var ymax = ymin;
	    for(i =1; i < positions.length; i++){
		var vect = positions[i];
		if(vect[0] > xmax ){
		    xmax = vect[0];
		} else if( vect[0] < xmin){
		    xmin = vect[0];
		}
		if(vect[1] > ymax ){
		    ymax = vect[1];
		} else if( vect[1] < ymin){
		    ymin = vect[1];
		}
	    }

	    var border = 2;
	    xmin -= border;
	    xmax += border;
	    ymin -= border;
	    ymax += border;

	    xSpacing = (xmax - xmin)/ (xDimension-1);
	    ySpacing = (ymax - ymin)/ (yDimension-1);

	    var pot = new MFFloat();
	    count = 0;

	    for(y = 0; y < yDimension; y++){
		yy = ymin + y * ySpacing;
		for(x = 0; x < xDimension; x++){
		    xx = xmin + x * xSpacing;
		    var v = 0;
		    for( i = 0; i < charges.length; i++){
			v += potential(xx,yy,i);
		    }
		    if(v < -5)
		      v = -5;
		    else if(v > 5)
		      v = 5;
		    pot[count] = v;
		    count ++;
		}
	    }
	    // assign all eventOut's

	    _data1 = new MFFloat();
	    _data2 = pot;

	    _ySpacing = ySpacing;
	    _xSpacing = xSpacing;
	    _xDimension = xDimension;
	    _yDimension = yDimension;
	    _xmin = xmin;
	    _ymin = ymin;

	    isReady = TRUE;
	    trace(xSpacing);
	    trace(ySpacing);
	    trace('Data2d.initialize');
	}
	
	function potential(x, y, n){
	    var pos = positions[n];
	    x -= pos[0];
	    y -= pos[1];
	    var r = Math.sqrt(x*x + y*y);
	    if(r < 0.1){
		r = 0.1;
	    }

	    return charges[n]/r;
	}
	"
	]
    }
}


PROTO Charge [
field SFFloat charge 1
field SFVec3f position  0 0 0
eventOut SFVec3f position_changed 
eventOut SFFloat charge_changed 
eventOut SFBool isReady
] {
    Group {
	children [
	DEF SENSOR PlaneSensor {
	}
	    
	DEF TRANSFORM Transform {
	    children  Transform {
		rotation 1 0 0 1.5708
		children Shape {
		    geometry Cylinder {radius 0.3 height 1}
		    #geometry Sphere {radius 0.3}
		    appearance Appearance {
			material DEF MATERIAL Material {
			}
		    }
		}
	    }
	}
	]
    }

    DEF SCRIPT_CHARGE Script {
	directOutput TRUE
	
	eventIn SFVec3f set_translation 
	eventIn SFBool set_active
	
	eventOut SFVec3f position_changed IS position_changed
	eventOut SFFloat charge_changed IS charge_changed
	eventOut SFBool isReady IS isReady

	field SFNode material USE MATERIAL
	field SFFloat charge IS charge
	field SFNode transform USE TRANSFORM 
	field SFVec3f position IS position
	field SFNode sensor USE SENSOR
	url [
	"javascript:

	function initialize(){
	    if(charge > 0){
		material.set_diffuseColor = new SFColor(1,0.1,0.1);
	    } else {
		material.set_diffuseColor = new SFColor(0.1,0.1,1);
	    }
	    transform.set_translation = position;
	    sensor.set_offset = position;
	    position_changed = position;
	    charge_changed = charge;
	    isReady = TRUE;
	}
	
	function set_translation(val, time){
	    transform.set_translation = val;
	}
	function set_active(val, time){

	    if(!val){ // drag finished, we can redraw distribution
	       position_changed = transform.translation;
	    }
	}
	"
	]
    }
    ROUTE SENSOR.translation_changed TO SCRIPT_CHARGE.set_translation 
    ROUTE SENSOR.isActive TO SCRIPT_CHARGE.set_active
}


#Graph2iso {
#    data2d Data2d {
#	xDimension 3
#	yDimension 3
#	xSpacing 0.5 
#	ySpacing 0.5 
#	data1 [0. 0.5 0 0.5 0.5 0.5 0 0.5 1]
#	data2 [0. 0.5 1 0. 0.5 0 0.5 0.5 0.5 ]
#    }
#}


#Transform {
#    translation 0 0 1
#    children DEF GRAPH Graph2iso {
#	data2d Cubics {
#	}
#    }
#}

Transform {
    scale 0.4 0.4 0.4
    children [
    DEF CHARGES Transform {
	translation 0 0 0
	children [
	Charge {charge  1 position -1  -1 0}	
	Charge {charge  1 position -1  1 0}
	Charge {charge  1 position  1  1 0}
	Charge {charge  1 position  1  -1 0}

	Charge {charge -1 position  1.41  0 0}
	Charge {charge -1 position -1.41 0 0}
	Charge {charge -1 position  0  1.41 0}
	Charge {charge -1 position  0  -1.41 0}
	]
    }

    DEF GRAPH Graph2iso {
	
    }
    ]
}


Switch {
    choice[
    DEF POTENTIAL CoulombPotential {
	xGrid 31 yGrid 31
#	positions [-1 -0.5, 0.5 0, 1 1, -0.5 1]
#	charges[1, -1, 1, -1]
    }
    ]
}

DEF SCRIPT_MAIN Script {

    directOutput TRUE
    field SFNode myself USE SCRIPT_MAIN 
    field SFNode charges USE CHARGES
    field SFNode potential USE POTENTIAL 
    field SFNode graph USE GRAPH

    eventIn SFVec3f set_position 

    
    field SFInt32 charges_to_wait 0

    
    url [
    "javascript:

    function initialize(){
	trace('main: ' + charges.children.length);
	for(i = 0; i < charges.children.length; i++){
	    Browser.addRoute(charges.children[i],'position_changed',
	    myself, 'set_position');
	}
	charges_to_wait = charges.children.length;
    }

    function set_position(val, time){
	trace('set_position: ' + val);
	charges_to_wait--;
	if(charges_to_wait <= 0){ 
	    // charges are ready -  recalculate data
	    trace('recalculating data');
	    var p = new MFVec3f();
	    var q = new MFFloat();
	    for(i = 0; i < charges.children.length; i++){
		q[i] = charges.children[i].charge_changed;
		p[i] = charges.children[i].position_changed;
		charges.children[i];		
	    }

	    potential.set_charges = q;
	    potential.set_positions = p;
	    potential.recalculate = TRUE;

	    graph.set_data = potential; 
	}
    }
    "
    ]     
}