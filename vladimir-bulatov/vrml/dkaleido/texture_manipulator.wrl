#VRML V2.0 utf8

WorldInfo {
    title "Texture Manupulator"
    info "author: Vladimir Bulatov, bulatov@dots.physics.orst.edu"
}


PROTO TextureManupulator [
eventIn SFVec3f set_point
eventIn SFBool set_active
field SFNode textureTransform TextureTransform {}
field SFFloat scale 1
field SFFloat speed 1

]

{
DEF TIMER TimeSensor {
    loop TRUE
}

DEF SCRIPT Script {
    
    directOutput TRUE

    eventIn SFVec3f set_point IS set_point 
    eventIn SFBool set_active IS set_active 
    eventIn SFTime set_time
    
    field SFFloat scale IS scale 
    field SFFloat speed IS speed

    field SFBool isActive FALSE
    field SFBool start FALSE
    field SFVec2f p_down 0 0 
    field SFVec2f p_curr 0 0 
    
    field SFNode ttransform IS textureTransform

    field SFInt32 mode 0 # 0 - translation 1 - rotation, 2 - scale    
    field SFVec2f curr_trans 0 0 
    field SFFloat curr_rotation 0
    field SFFloat curr_scale 1
    field SFTime t0 0
    field SFTime told 0
    field SFFloat k0 0
    field SFFloat k1 0
    field SFFloat k2 0

    url[
    "javascript:

    function initialize(){
	curr_scale = scale;	
	scale_vector = new  SFVec2f(curr_scale,curr_scale);
	ttransform.set_scale = scale_vector;
    }
    
    function set_time(val, time){
	if(t0 == 0.){
	    t0 = val-10*Math.random();
	    k0 = 0.05*(2*Math.random()-1);
	    k1 = 0.025*(2*Math.random()-1);
	    k2 = 0.025*(2*Math.random()-1);
	    told = t0;
	}
	t = val - t0;
	dt = val - told;
	if(!isActive) {
	    curr_rotation += speed*k0*dt;
	    curr_trans[0] += speed*k1*Math.sin(t/20)*dt;
	    curr_trans[1] += speed*k2*Math.cos(t/20)*dt;
	    ttransform.set_rotation = curr_rotation;		    
	    ttransform.set_translation = curr_trans;
	    ttransform.set_center = curr_trans;
	    
	    //trace(ttransform.rotation);
	}

	told = val;
    }

    function set_active(value, time){
	if(value){
	    isActive = TRUE;
	    start = TRUE;
	    //trace('mouse down');
	} else {	    
	    isActive = FALSE;
	    //trace('mouse up');
	}
	
    }

    function set_point(val, time){
	if(start){
	    p_down[0] = val[0];
	    p_down[1] = val[1];
	    start = FALSE;
	    //trace('down: ' + val);
	    drag = TRUE;
	    var r = p_down.length();
	    if(r < 0.5){
		mode = 0;
	    } else {
		mode = 1; // rotation or scale
	    }
	    return;
	}

	if(isActive){

	    p_curr = new SFVec2f( val[0], val[1]);
	    // translation
	    if(mode == 0){ 
		var dist = p_curr.subtract(p_down);		
		dist =  curr_trans.add(dist);
		//trace('down: ' + val);
		ttransform.set_translation = dist;
		ttransform.set_center = dist;
		curr_trans = dist;
		p_down = p_curr;

	    } else { // scale rotation
		
		var s = curr_scale;
		var l_old = p_down.length();
		var l_curr = p_curr.length();
		s *= l_old/l_curr;
		scale_vector.x = scale_vector.y = s;
		ttransform.set_scale = scale_vector;
		curr_scale = s;

		var fi = p_down[0]*p_curr[1] - p_down[1]*p_curr[0];
		if(l_old != 0.0 && l_curr != 0.0){
		    fi /= (l_old*l_curr);
		    fin = Math.asin(fi);
		    curr_rotation += fi;
		    ttransform.set_rotation = curr_rotation;		    
		}
		
		p_down = p_curr;
		
	    }

	}	
    }    
    
    "
    ]
    
}
ROUTE TIMER.time TO SCRIPT.set_time

}